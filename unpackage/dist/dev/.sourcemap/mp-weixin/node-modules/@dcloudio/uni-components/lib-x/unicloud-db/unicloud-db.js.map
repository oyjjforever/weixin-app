{"version":3,"file":"unicloud-db.js","sources":["../../../Program Files/HBuilderX/plugins/uniapp-cli-vite/node_modules/@dcloudio/uni-components/lib-x/unicloud-db/unicloud-db.vue","../../../Program Files/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/VzovUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpLXZpdGUvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby91bmktY29tcG9uZW50cy9saWIteC91bmljbG91ZC1kYi91bmljbG91ZC1kYi52dWU"],"sourcesContent":["<template>\n  <uni-cloud-db-element ref=\"UniCloudDB\">\n    <slot :data=\"dataList\" :loading=\"loading\" :hasMore=\"hasMore\" :pagination=\"pagination\" :error=\"error\" />\n  </uni-cloud-db-element>\n</template>\n\n<script lang=\"uts\">\n\n\n\n\n\n  let registerFlag = false\n\n\n  const EVENT_LOAD = 'load'\n  const EVENT_ERROR = 'error'\n  const PAGE_MODE_ADD = 'add'\n  const PAGE_MODE_REPLACE = 'replace'\n  const LOAD_MODE_AUTO = 'auto'\n  const LOAD_MODE_MANUAL = 'manual'\n  // const LOAD_MODE_ONREADY = 'onready'\n\n  type SuccessCallback<T> = (res : T | null) => void | null\n  type FailCallback = (err : any | null) => void | null\n  type CompleteCallback = () => void | null\n\n  type GetSuccessCallback = SuccessCallback<UniCloudDBGetResult>\n  type AddSuccessCallback = SuccessCallback<UniCloudDBAddResult>\n  type RemoveSuccessCallback = SuccessCallback<UniCloudDBRemoveResult>\n  type UpdateSuccessCallback = SuccessCallback<UniCloudDBUpdateResult>\n\n  export type UniCloudDBComponentPaginationType = {\n    current : number,\n    size : number,\n    count : number\n  }\n\n  export type UniCloudDBComponentLoadDataOptions = {\n    clear ?: boolean | null,\n    current ?: number | null,\n    success ?: GetSuccessCallback,\n    fail ?: FailCallback,\n    complete ?: CompleteCallback,\n  }\n\n  export type UniCloudDBComponentAddOptions = {\n    /**\n     * @default true\n     */\n    showToast ?: boolean | null,\n    toastTitle ?: string | null,\n    /**\n     * @default true\n     */\n    needLoading ?: boolean | null,\n    loadingTitle ?: string | null,\n    success ?: AddSuccessCallback,\n    fail ?: FailCallback,\n    complete ?: CompleteCallback,\n  }\n\n  export type UniCloudDBComponentRemoveOptions = {\n    confirmTitle ?: string | null,\n    confirmContent ?: string | null,\n    /**\n     * @default true\n     */\n    needConfirm ?: boolean | null,\n    /**\n     * @default true\n     */\n    needLoading ?: boolean | null,\n    loadingTitle ?: string | null,\n    success ?: RemoveSuccessCallback,\n    fail ?: FailCallback,\n    complete ?: CompleteCallback,\n  }\n\n  export type UniCloudDBComponentUpdateOptions = {\n    /**\n     * @default true\n     */\n    showToast ?: boolean | null,\n    toastTitle ?: string | null,\n    confirmTitle ?: string | null,\n    confirmContent ?: string | null,\n    /**\n     * @default true\n     */\n    needConfirm ?: boolean | null,\n    /**\n     * @default true\n     */\n    needLoading ?: boolean | null,\n    loadingTitle ?: string | null,\n    success ?: UpdateSuccessCallback,\n    fail ?: FailCallback,\n    complete ?: CompleteCallback,\n  }\n\n  function cast_callback<T>(options : any | null) : T | null {\n    return options as T | null\n  }\n\n\n\n\n\n\n\n\n  const RealUniElementImpl = typeof UniElementImpl === 'undefined' ? class {} : UniElementImpl\n\n\n\n\n\n  export class UniCloudDBElement extends RealUniElementImpl {\n    constructor(data : INodeData, pageNode : PageNode) {\n      super(data, pageNode);\n      const TagName = 'UNICLOUD-DB';\n      Object.defineProperty(this, 'tagName', {\n        value: TagName,\n        writable: false\n      });\n      Object.defineProperty(this, 'nodeName', {\n        value: TagName,\n        writable: false\n      });\n    }\n\n\n    dataList : Array<UTSJSONObject> = []\n\n    loadData(options : UTSJSONObject = {}) {\n      this.onLoadData({\n        clear: options.getBoolean('clear'),\n        current: options.getNumber('current'),\n        success: cast_callback<GetSuccessCallback>(options['success']),\n        fail: cast_callback<FailCallback>(options['fail']),\n        complete: cast_callback<CompleteCallback>(options['complete'])\n      } as UniCloudDBComponentLoadDataOptions)\n    }\n\n    loadMore() {\n      this.onLoadMore()\n    }\n\n    add(value : UTSJSONObject, options : UTSJSONObject) {\n      this.onAdd(value, {\n        showToast: options.getBoolean('showToast') ?? true,\n        toastTitle: options.getString('toastTitle'),\n        needLoading: options.getBoolean('needLoading') ?? true,\n        loadingTitle: options.getString('loadingTitle'),\n        success: cast_callback<AddSuccessCallback>(options['success']),\n        fail: cast_callback<FailCallback>(options['fail']),\n        complete: cast_callback<CompleteCallback>(options['complete'])\n      } as UniCloudDBComponentAddOptions)\n    }\n    // @ts-ignore\n    remove(id : any, options : UTSJSONObject) {\n\n\n\n\n\n\n\n\n      this.onRemove(id, {\n        confirmTitle: options.getString('confirmTitle'),\n        confirmContent: options.getString('confirmContent'),\n        needConfirm: options.getBoolean('needConfirm') ?? true,\n        needLoading: options.getBoolean('needLoading') ?? true,\n        loadingTitle: options.getString('loadingTitle'),\n        success: cast_callback<RemoveSuccessCallback>(options['success']),\n        fail: cast_callback<FailCallback>(options['fail']),\n        complete: cast_callback<CompleteCallback>(options['complete'])\n      } as UniCloudDBComponentRemoveOptions)\n    }\n\n    update(id : string, value : UTSJSONObject, options : UTSJSONObject) {\n      this.onUpdate(id, value, {\n        showToast: options.getBoolean('showToast') ?? true,\n        toastTitle: options.getString('toastTitle'),\n        confirmTitle: options.getString('confirmTitle'),\n        confirmContent: options.getString('confirmContent'),\n        needConfirm: options.getBoolean('needConfirm') ?? true,\n        needLoading: options.getBoolean('needLoading') ?? true,\n        loadingTitle: options.getString('loadingTitle'),\n        success: cast_callback<UpdateSuccessCallback>(options['success']),\n        fail: cast_callback<FailCallback>(options['fail']),\n        complete: cast_callback<CompleteCallback>(options['complete'])\n      } as UniCloudDBComponentUpdateOptions)\n    }\n\n    onLoadData! : (_ : UniCloudDBComponentLoadDataOptions) => Promise<void>\n    onLoadMore! : () => void\n    onAdd! : (value : UTSJSONObject, options : UniCloudDBComponentAddOptions) => void\n    onUpdate!: (id : string, value : UTSJSONObject, options : UniCloudDBComponentUpdateOptions) => void\n    onRemove!: (id : any, options : UniCloudDBComponentRemoveOptions) => void\n  }\n\n  export default {\n    name: 'UniCloudDB',\n    rootElement: {\n      name: 'uni-cloud-db-element',\n      class: UniCloudDBElement\n    },\n    slots: Object as SlotsType<{\n      default : {\n        data : Array<UTSJSONObject>,\n        loading : boolean,\n        hasMore : boolean,\n        pagination : UniCloudDBComponentPaginationType,\n        error : UniCloudError | null\n      }\n    }>,\n    props: {\n      collection: {\n        type: [String, Object],\n        default: ''\n      },\n      field: {\n        type: String,\n        default: ''\n      },\n      orderby: {\n        type: String,\n        default: ''\n      },\n      where: {\n        type: [String, Object],\n        default: ''\n      },\n      pageData: {\n        type: String,\n        default: 'add'\n      },\n      pageCurrent: {\n        type: Number,\n        default: 1\n      },\n      pageSize: {\n        type: Number,\n        default: 20\n      },\n      getcount: {\n        type: Boolean,\n        default: false\n      },\n      gettree: {\n        type: [String, Object],\n        default: ''\n      },\n      gettreepath: {\n        type: Boolean,\n        default: false\n      },\n      startwith: {\n        type: String,\n        default: ''\n      },\n      limitlevel: {\n        type: Number,\n        default: 10\n      },\n      groupby: {\n        type: String,\n        default: ''\n      },\n      groupField: {\n        type: String,\n        default: ''\n      },\n      distinct: {\n        type: Boolean,\n        default: false\n      },\n      pageIndistinct: {\n        type: Boolean,\n        default: false\n      },\n      foreignKey: {\n        type: String,\n        default: ''\n      },\n      loadtime: {\n        type: String,\n        default: 'auto'\n      },\n      manual: {\n        type: Boolean,\n        default: false\n      },\n      ssrKey: {\n        type: String,\n        default: \"\"\n      }\n    },\n    data() {\n      return {\n\n        // TODO 修复类型错误\n        // @ts-ignore\n        dataList: ssrRef([] as Array<UTSJSONObject>) as Array<UTSJSONObject>,\n\n\n        dataList: [] as Array<UTSJSONObject>,\n\n        // dataList: [] as Array<UTSJSONObject>,\n        loading: false,\n        hasMore: false,\n        isEnded: false,\n        pagination: {\n          current: 1,\n          size: 20,\n          count: 0,\n        } as UniCloudDBComponentPaginationType,\n        error: null as UniCloudError | null\n      }\n    },\n\n    beforeCreate() {\n      if (!registerFlag) {\n        registerFlag = true\n        // @ts-ignore\n        typeof customElements !== 'undefined' && customElements.define(\n          'uni-cloud-db-element',\n          // @ts-ignore\n          UniCloudDBElement,\n        )\n      }\n    },\n\n\n\n\n\n\n\n\n\n\n    created() {\n      this.pagination.current = this.pageCurrent\n      this.pagination.size = this.pageSize\n\n      this.$watch(\n        () : any => [\n          this.pageCurrent,\n          this.pageSize,\n          this.collection,\n          this.field,\n          this.getcount,\n          this.orderby,\n          this.where,\n          this.groupby,\n          this.groupField,\n          this.distinct\n        ],\n        (newValue : Array<any>, oldValue : Array<any>) => {\n          this.pagination.size = this.pageSize\n          if (newValue[0] !== oldValue[0]) {\n            this.pagination.current = this.pageCurrent\n          }\n\n          if (this.loadtime == LOAD_MODE_MANUAL) {\n            return\n          }\n\n          let needReset = false\n          for (let i = 2; i < newValue.length; i++) {\n            if (newValue[i] !== oldValue[i]) {\n              needReset = true\n              break\n            }\n          }\n          if (needReset) {\n            this.clear()\n            this.reset()\n          }\n\n          this.get(null)\n        }\n      )\n\n      if (!this.manual && this.loadtime == LOAD_MODE_AUTO && this.dataList.length == 0) {\n        if (typeof this.collection == 'string') {\n          const collectionString = this.collection as string\n          if (collectionString.length == 0) {\n            return\n          }\n        } else if (Array.isArray(this.collection)) {\n          const collectionArray = this.collection as Array<any>\n          if (collectionArray.length == 0) {\n            return\n          }\n        }\n        this.get(null)\n      }\n    },\n    mounted() {\n      const uniCloudDBElement = this.$refs['UniCloudDB'] as UniCloudDBElement\n      uniCloudDBElement.dataList = this.dataList;\n\n\n\n\n\n\n\n\n\n      uniCloudDBElement.onLoadData = this.loadData.bind(this);\n      uniCloudDBElement.onLoadMore = this.loadMore.bind(this);\n      uniCloudDBElement.onAdd = this.add.bind(this);\n      uniCloudDBElement.onUpdate = this.update.bind(this);\n      uniCloudDBElement.onRemove = this.remove.bind(this);\n\n    },\n    methods: {\n      async loadData(options : UniCloudDBComponentLoadDataOptions) : Promise<void> {\n        let clear = (options.clear != null && options.clear == true)\n        if (clear == true) {\n          if (this.pageData == PAGE_MODE_REPLACE) {\n            this.clear()\n          }\n          this.reset()\n        }\n\n        await this.get(options)\n      },\n      loadMore() {\n        if (this.isEnded || this.loading) {\n          return\n        }\n\n        if (this.pageData == PAGE_MODE_ADD) {\n          this.pagination.current++\n        }\n\n        this.get(null)\n      },\n      refresh() {\n        this.clear()\n        this.get(null)\n      },\n      clear() {\n        this.isEnded = false\n        this.dataList.length = 0\n      },\n      reset() {\n        this.pagination.current = 1\n      },\n      async get(options? : UniCloudDBComponentLoadDataOptions | null) : Promise<void> {\n        let loadAfterClear = false\n        if (options != null && options.clear != null && options.clear == true) {\n          loadAfterClear = true\n        }\n        if (options != null && options.current != null) {\n          this.pagination.current = options.current!\n        }\n\n        this.error = null\n\n        this.loading = true\n        await this.getExec().then((res : UniCloudDBGetResult) => {\n          const data = res.data\n          const count = res.count\n\n          this.isEnded = (count != null) ? (this.pagination.current * this.pagination.size >= count) : (data.length < this.pageSize)\n          this.hasMore = !this.isEnded\n\n          if (this.getcount && count != null) {\n            this.pagination.count = count\n          }\n\n          this._dispatchEvent(EVENT_LOAD, data)\n\n          if (loadAfterClear || this.pageData == PAGE_MODE_REPLACE) {\n            this.dataList = data\n          } else {\n            this.dataList.push(...data)\n          }\n\n          options?.success?.(res)\n        }).catch((err : any | null) => {\n          this._requestFail(err, null)\n          options?.fail?.(err)\n        }).then(() => {\n          this.loading = false\n          options?.complete?.()\n        }, () => {\n          this.loading = false\n          options?.complete?.()\n        })\n      },\n      add(value : UTSJSONObject, options : UniCloudDBComponentAddOptions) {\n        this._needLoading(options.needLoading, options.loadingTitle)\n        const db = uniCloud.databaseForJQL()\n        db.collection(this._getMainCollection()).add(value).then<void>((res : UniCloudDBAddResult) => {\n          options.success?.(res)\n          this._isShowToast(options.showToast ?? false, options.toastTitle ?? 'add success')\n        }).catch((err) => {\n          this._requestFail(err, options.fail)\n        }).then(() => {\n          this._requestComplete(options.complete, options.needLoading)\n        }, () => {\n          this._requestComplete(options.complete, options.needLoading)\n        })\n      },\n      update(id : string, value : UTSJSONObject, options : UniCloudDBComponentUpdateOptions) {\n        if (options.needConfirm == true) {\n          uni.showModal({\n            title: options.confirmTitle,\n            content: options.confirmContent,\n            showCancel: true,\n            success: (res) => {\n              if (res.confirm) {\n                this._update(id, value, options)\n              }\n            }\n          })\n        } else {\n          this._update(id, value, options)\n        }\n      },\n      remove(id : any, options : UniCloudDBComponentRemoveOptions) {\n        const ids = Array.isArray(id) ? (id as Array<any>) : [id]\n        if (options.needConfirm == true) {\n          uni.showModal({\n            title: options.confirmTitle,\n            content: options.confirmContent,\n            showCancel: true,\n            success: (res) => {\n              if (res.confirm) {\n                this._remove(ids, options)\n              }\n            }\n          })\n        } else {\n          this._remove(ids, options)\n        }\n      },\n      _update(id : string, value : UTSJSONObject, options : UniCloudDBComponentUpdateOptions) {\n        this._needLoading(options.needLoading, options.loadingTitle)\n        const db = uniCloud.databaseForJQL()\n        db.collection(this._getMainCollection()).doc(id).update(value).then((res) => {\n          options.success?.(res)\n          this._isShowToast(options.showToast ?? false, options.toastTitle ?? 'update success')\n        }).catch((err : any | null) => {\n          this._requestFail(err, options.fail)\n        }).then(() => {\n          this._requestComplete(options.complete, options.needLoading)\n        }, () => {\n          this._requestComplete(options.complete, options.needLoading)\n        })\n      },\n      _remove(ids : Array<any>, options : UniCloudDBComponentRemoveOptions) {\n        this._needLoading(options.needLoading, options.loadingTitle)\n        const db = uniCloud.databaseForJQL()\n        const dbCommand = db.command\n        db.collection(this._getMainCollection()).where({\n          _id: dbCommand.in(ids)\n        }).remove().then((res) => {\n          options.success?.(res)\n          if (this.pageData == PAGE_MODE_REPLACE) {\n            this.refresh()\n          } else {\n            this._removeData(ids)\n          }\n        }).catch((err : any | null) => {\n          this._requestFail(err, options.fail)\n        }).then(() => {\n          this._requestComplete(options.complete, options.needLoading)\n        }, () => {\n          this._requestComplete(options.complete, options.needLoading)\n        })\n      },\n      _removeData(ids : Array<any>) {\n        const il = ids.slice(0)\n        const dl = this.dataList\n        for (let i = dl.length - 1; i >= 0; i--) {\n          const index = il.indexOf(dl[i]['_id'])\n          if (index >= 0) {\n            dl.splice(i, 1)\n            il.splice(index, 1)\n          }\n        }\n      },\n      _isShowToast(showToast : boolean, title : string) {\n        if (showToast == true) {\n          uni.showToast({\n            title: title\n          })\n        }\n      },\n      _needLoading(needLoading ?: boolean | null, title ?: string | null) {\n        if (needLoading == true) {\n          uni.showLoading({\n            mask: true,\n            title: title ?? ''\n          })\n        }\n      },\n      _requestFail(err ?: any | null, callback ?: FailCallback | null) {\n        callback?.(err)\n        this.error = err as UniCloudError\n        this.$emit(EVENT_ERROR, err)\n      },\n      _requestComplete(callback ?: CompleteCallback | null, needLoading ?: boolean | null) {\n        callback?.()\n        if (needLoading == true) {\n          uni.hideLoading()\n        }\n      },\n      getExec() : Promise<UniCloudDBGetResult> {\n        return this.getTemp()\n      },\n      getTemp() : Promise<UniCloudDBGetResult> {\n        let db = uniCloud.databaseForJQL()\n\n        let collection = Array.isArray(this.collection) ? db.collection(...(this.collection as Array<any>)) : db.collection(this.collection)\n\n        let filter : UniCloudDBFilter | null = null\n        if (this.foreignKey.length > 0) {\n          filter = collection.foreignKey(this.foreignKey)\n        }\n\n        if (typeof this.where == 'string') {\n          const whereString = this.where as string\n          if (whereString.length > 0) {\n            filter = (filter != null) ? filter.where(this.where) : collection.where(this.where)\n          }\n        } else if (typeof this.where == 'object') {\n          filter = (filter != null) ? filter.where(this.where) : collection.where(this.where)\n        }\n\n        let query : UniCloudDBQuery | null = null\n        if (this.field.length > 0) {\n          query = (filter != null) ? filter.field(this.field) : collection.field(this.field)\n        }\n        if (this.groupby.length > 0) {\n          if (query != null) {\n            query = query.groupBy(this.groupby)\n          } else if (filter != null) {\n            query = filter.groupBy(this.groupby)\n          }\n        }\n        if (this.groupField.length > 0) {\n          if (query != null) {\n            query = query.groupField(this.groupField)\n          } else if (filter != null) {\n            query = filter.groupField(this.groupField)\n          }\n        }\n        if (this.distinct == true) {\n          if (query != null) {\n            query = query.distinct(this.field)\n          } else if (filter != null) {\n            query = filter.distinct(this.field)\n          }\n        }\n        if (this.orderby.length > 0) {\n          if (query != null) {\n            query = query.orderBy(this.orderby)\n          } else if (filter != null) {\n            query = filter.orderBy(this.orderby)\n          } else {\n            query = collection.orderBy(this.orderby)\n          }\n        }\n\n        const size = this.pagination.size\n        const current = this.pagination.current\n        const skipSize = size * (current - 1)\n        if (query != null) {\n          query = query.skip(skipSize).limit(size)\n        } else if (filter != null) {\n          query = filter.skip(skipSize).limit(size)\n        } else {\n          query = collection.skip(skipSize).limit(size)\n        }\n\n        const getOptions = {}\n        const treeOptions = {\n          limitLevel: this.limitlevel,\n          startWith: this.startwith\n        }\n        if (this.getcount == true) {\n          getOptions['getCount'] = this.getcount\n        }\n        if (typeof this.gettree == 'string') {\n          const getTreeString = this.gettree as string\n          if (getTreeString.length > 0) {\n            getOptions['getTree'] = treeOptions\n          }\n        } else if (typeof this.gettree == 'object') {\n          getOptions['getTree'] = treeOptions\n        }\n        if (this.gettreepath == true) {\n          getOptions['getTreePath'] = treeOptions\n        }\n\n        return query.get(getOptions)\n      },\n      _getMainCollection() : string {\n        if (typeof this.collection === 'string') {\n          return (this.collection as string).split(',')[0]\n        }\n\n        if (Array.isArray(this.collection)) {\n          const array = this.collection as Array<any>\n          const index = array[0] as UTSJSONObject\n          const collection = index.getString('$db[0].$param[0]')\n          return collection ?? ''\n        }\n\n        return ''\n      },\n      _dispatchEvent(type : string, data : Array<UTSJSONObject>) {\n        this.$emit(type, data, this.isEnded, {\n          current: this.pagination.current,\n          size: this.pagination.size,\n          count: this.pagination.count\n        })\n      }\n    }\n  }\n</script>","import Component from 'W:/Program Files/HBuilderX/plugins/uniapp-cli-vite/node_modules/@dcloudio/uni-components/lib-x/unicloud-db/unicloud-db.vue'\nwx.createComponent(Component)"],"names":["UniElementImpl","defineComponent","ssrRef","uniCloud"],"mappings":"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","x_google_ignoreList":[0]}