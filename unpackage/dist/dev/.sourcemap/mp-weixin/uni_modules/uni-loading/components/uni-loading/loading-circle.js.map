{"version":3,"file":"loading-circle.js","sources":["uni_modules/uni-loading/components/uni-loading/loading-circle.uvue","../../../Program Files/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/VzovV29ya3BsYWNlLzIu5bCP56iL5bqPL2xpaGFpLWFwcC91bmlfbW9kdWxlcy91bmktbG9hZGluZy9jb21wb25lbnRzL3VuaS1sb2FkaW5nL2xvYWRpbmctY2lyY2xlLnV2dWU"],"sourcesContent":["<template>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</template>\r\n<script lang=\"uts\">\r\n  import { easeInOutCubic } from './util'\r\n  let elId = 0\r\n  export default {\r\n    name: \"circle\",\r\n    props: {\r\n      speed: {\r\n        type: Number,\r\n        default: 16,\r\n      },\r\n      size: {\r\n        type: Number,\r\n        default: 20,\r\n      },\r\n      color: {\r\n        type: String,\r\n        default: '#666',\r\n      }\r\n    },\r\n    data() {\r\n      // 防止多调用，随机元素id\r\n      elId += 1\r\n      const elID = `Uni_Load_Circle_${elId}`\r\n      return {\r\n        elId: elID,\r\n        timer: 0,\r\n      };\r\n    },\r\n    computed: {\r\n      iconsSize() : number {\r\n        return (this.size / 10) +1\r\n      }\r\n    },\r\n    mounted() {\r\n\r\n\r\n\r\n    },\r\n    unmounted() {\r\n      // 组件卸载时，需要卸载定时器，优化性能，防止页面卡死\r\n      clearInterval(this.timer)\r\n    },\r\n    methods: {\r\n      /**\r\n       * 初始化圆环\r\n       */\r\n      init() {\r\n        const refs = this.$refs[this.elId] as UniElement\r\n        let ctx = refs.getDrawableContext()!\r\n        this.build_circular(ctx)\r\n      },\r\n\r\n      /**\r\n       * 构建圆环动画\r\n       */\r\n      build_circular(ctx : DrawableContext) {\r\n        let startAngle = 0;\r\n        let rotate = 0;\r\n        const ARC_LENGTH = 359;\r\n        const center = this.size / 2; // 圆心\r\n        const lineWidth = this.size / 10; // 圆环宽度\r\n        const duration = 1200; // 动画持续时间\r\n        const interval = this.speed; // 定时器间隔（大约 60 帧每秒）\r\n\r\n        // 使圆环过度更自然，不必运动到底\r\n        const ARC_MAX = 358\r\n        let startTime = 0;\r\n        let foreward_end = 0 // 正传\r\n        let reversal_end = ARC_MAX // 反转\r\n        function pogress_time() : number {\r\n          const currentTime = Date.now();\r\n          // 运动时间计算\r\n          const elapsedTime = currentTime - startTime;\r\n          const progress = elapsedTime / duration;\r\n          // 动画缓动\r\n          const easedProgress = easeInOutCubic(progress);\r\n          return easedProgress\r\n        }\r\n        const draw = () => {\r\n\r\n          ctx.reset();\r\n          ctx.beginPath();\r\n\r\n          if (reversal_end == ARC_MAX) {\r\n            foreward_end = Math.min(pogress_time() * ARC_LENGTH, ARC_LENGTH); // 限制 end 的最大值为 ARC_LENGTH\r\n            if (foreward_end >= ARC_MAX) {\r\n              reversal_end = 0\r\n              foreward_end = ARC_MAX\r\n              startTime = Date.now();\r\n            }\r\n          }\r\n\r\n          if (foreward_end == ARC_MAX) {\r\n            reversal_end = Math.min(pogress_time() * ARC_LENGTH, ARC_LENGTH);\r\n            if (reversal_end >= ARC_MAX) {\r\n              reversal_end = ARC_MAX\r\n              foreward_end = 0\r\n              startTime = Date.now();\r\n            }\r\n          }\r\n\r\n          ctx.arc(\r\n            center,\r\n            center,\r\n            center - lineWidth,\r\n            startAngle + rotate + (reversal_end * Math.PI / 180),\r\n            startAngle + rotate + (foreward_end * Math.PI / 180)\r\n          );\r\n          ctx.lineWidth = lineWidth;\r\n          const fillColor = (this.color !== '' ? this.color : '#666').toString();\r\n          ctx.strokeStyle = fillColor;\r\n          ctx.stroke();\r\n          ctx.update();\r\n          rotate += 0.05; // 旋转速度\r\n        }\r\n\r\n        this.timer = setInterval(() => draw(), interval);\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .block {\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</style>\r\n","import Component from 'W:/Workplace/2.小程序/lihai-app/uni_modules/uni-loading/components/uni-loading/loading-circle.uvue'\nwx.createComponent(Component)"],"names":["defineComponent","easeInOutCubic"],"mappings":";;;AAYE,IAAI,OAAO;AACX,MAAA,YAAeA,8BAAA;AAAA,EACb,MAAM;AAAA,EACN,OAAO;AAAA,IACL,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,EACD;AAAA,EACD,OAAI;AAEF,YAAQ;AACR,UAAM,OAAO,mBAAmB,IAAI;AACpC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA;EAEV;AAAA,EACD,UAAU;AAAA,IACR,YAAS;AACP,aAAQ,KAAK,OAAO,KAAK;AAAA,IAC3B;AAAA,EACD;AAAA,EACD,UAAO;AAAA,EAIN;AAAA,EACD,YAAS;AAEP,kBAAc,KAAK,KAAK;AAAA,EACzB;AAAA,EACD,SAAS;AAAA;AAAA;AAAA;AAAA,IAIP,OAAI;AACF,YAAM,OAAO,KAAK,MAAM,KAAK,IAAI;AACjC,UAAI,MAAM,KAAK;AACf,WAAK,eAAe,GAAG;AAAA,IACxB;AAAA;AAAA;AAAA;AAAA,IAKD,eAAe,KAAqB;AAClC,UAAI,aAAa;AACjB,UAAI,SAAS;AACb,YAAM,aAAa;AACnB,YAAM,SAAS,KAAK,OAAO;AAC3B,YAAM,YAAY,KAAK,OAAO;AAC9B,YAAM,WAAW;AACjB,YAAM,WAAW,KAAK;AAGtB,YAAM,UAAU;AAChB,UAAI,YAAY;AAChB,UAAI,eAAe;AACnB,UAAI,eAAe;AACnB,eAAS,eAAY;AACnB,cAAM,cAAc,KAAK;AAEzB,cAAM,cAAc,cAAc;AAClC,cAAM,WAAW,cAAc;AAE/B,cAAM,gBAAgBC,iEAAe,QAAQ;AAC7C,eAAO;AAAA,MACT;AACA,YAAM,OAAO,MAAA;AAEX,YAAI,MAAK;AACT,YAAI,UAAS;AAEb,YAAI,gBAAgB,SAAS;AAC3B,yBAAe,KAAK,IAAI,aAAY,IAAK,YAAY,UAAU;AAC/D,cAAI,gBAAgB,SAAS;AAC3B,2BAAe;AACf,2BAAe;AACf,wBAAY,KAAK;UACnB;AAAA,QACF;AAEA,YAAI,gBAAgB,SAAS;AAC3B,yBAAe,KAAK,IAAI,aAAY,IAAK,YAAY,UAAU;AAC/D,cAAI,gBAAgB,SAAS;AAC3B,2BAAe;AACf,2BAAe;AACf,wBAAY,KAAK;UACnB;AAAA,QACF;AAEA,YAAI,IACF,QACA,QACA,SAAS,WACT,aAAa,SAAU,eAAe,KAAK,KAAK,KAChD,aAAa,SAAU,eAAe,KAAK,KAAK,GAAG;AAErD,YAAI,YAAY;AAChB,cAAM,aAAa,KAAK,UAAU,KAAK,KAAK,QAAQ,QAAQ;AAC5D,YAAI,cAAc;AAClB,YAAI,OAAM;AACV,YAAI,OAAM;AACV,kBAAU;AAAA,MACZ;AAEA,WAAK,QAAQ,YAAY,MAAM;AAAA,eAAA;MAAA,GAAQ,QAAQ;AAAA,IACjD;AAAA,EAEF;CACF;;;;;ACjIF,GAAG,gBAAgB,SAAS;"}