{"version":3,"file":"report.js","sources":["uni_modules/uni-stat/utssdk/common/core/report.uts"],"sourcesContent":["import { OnLaunchOptionsWithCst, StatDefault, PageParams, TitleConfigParams, RequestData, EventParams } from '../../interface.uts'\r\nimport { get_residence_time, get_time, set_first_time, get_last_visit_time, get_first_visit_time, get_total_visit_count, get_page_residence_time, set_page_residence_time } from '../utils/pageTime.uts'\r\nimport { get_net, get_default_data, get_route, get_page_name, get_odid, is_handle_device, get_scene, get_report_Interval } from '../utils/pageInfo.uts'\r\nimport { ReportType, ReprotCstType } from './stat-type.uts'\r\nimport { dbGet, dbSet, dbRemove } from '../utils/db.uts'\r\nimport { Log, Map2String, Map2Json, handle_data } from '../utils/index.uts'\r\nimport { OPERATING_TIME, STAT_VERSION, Config } from '../config.uts'\r\n// import Config from '../config'\r\n\r\n\r\n// #ifdef APP-ANDROID\r\n// @ts-ignore\r\nclass CloudObjectToDo extends InternalUniCloudCloudObjectCaller {\r\n  // @ts-ignore\r\n  constructor(obj : InternalUniCloudCloudObject) {\r\n    super(obj)\r\n  }\r\n  report(...do_not_transform_spread : Array<any | null>) : Promise<UTSJSONObject> {\r\n    // @ts-ignore\r\n    return this._obj.callMethod('report', this._getArgs(...do_not_transform_spread))\r\n  }\r\n}\r\n// #endif\r\n\r\n\r\n\r\nexport class Report {\r\n  /* uniCloud 实例 */\r\n  // @ts-ignore\r\n  static uniCloudInstance : UniCloud | null = null\r\n  /**进入应用标识*/\r\n  licationShow : boolean = false\r\n  /**离开应用标识*/\r\n  licationHide : boolean = false\r\n  /** 上报数据 */\r\n  statData : StatDefault\r\n  // 上报间隔时长,默认值 是10\r\n  eportInterval = get_report_Interval(OPERATING_TIME)\r\n\r\n  _navigationBarTitle : TitleConfigParams = {\r\n    config: '',\r\n    page: '',\r\n    report: '',\r\n    lt: ''\r\n  } as TitleConfigParams\r\n\r\n  constructor() {\r\n    this.statData = get_default_data()\r\n\r\n    // 注册拦截器\r\n    // @ts-ignore\r\n    let registerInterceptor = typeof uni.addInterceptor === 'function'\r\n    if (registerInterceptor) {\r\n      this.interceptSetNavBar()\r\n      this.interceptLogin()\r\n      this.interceptShare(true)\r\n      this.interceptRequestPayment()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 拦截 setNavigationBarTitle 事件\r\n   */\r\n  interceptSetNavBar() {\r\n    let self = this\r\n    // @ts-ignore\r\n    uni.addInterceptor('setNavigationBarTitle', {\r\n      // @ts-ignore\r\n      invoke(args : SetNavigationBarTitleOptions) {\r\n        self._navigationBarTitle.page = args.title\r\n      },\r\n      // @ts-ignore\r\n    } as Interceptor)\r\n  }\r\n\r\n  /**\r\n   * 拦截 login 事件\r\n   */\r\n  interceptLogin() {\r\n    let self = this\r\n    // @ts-ignore\r\n    uni.addInterceptor('login', {\r\n      complete() {\r\n        self._login()\r\n      },\r\n      // @ts-ignore\r\n    } as Interceptor)\r\n  }\r\n  interceptShare(type : boolean = false) {\r\n    let self = this\r\n    if (!type) {\r\n      self._share()\r\n      return\r\n    }\r\n    // @ts-ignore\r\n    uni.addInterceptor('share', {\r\n      complete() {\r\n        self._share()\r\n      }\r\n      // @ts-ignore\r\n    } as Interceptor)\r\n  }\r\n  interceptRequestPayment() {\r\n    let self = this\r\n    // @ts-ignore\r\n    uni.addInterceptor('requestPayment', {\r\n      success() {\r\n        self._payment('pay_success')\r\n      },\r\n      fail() {\r\n        self._payment('pay_fail')\r\n      },\r\n      // @ts-ignore\r\n    } as Interceptor)\r\n  }\r\n\r\n  /**\r\n   * 实现登录拦截逻辑\r\n   */\r\n  private _login() {\r\n    this.sendEventRequest(\r\n      {\r\n        key: 'login',\r\n      } as EventParams\r\n    )\r\n  }\r\n\r\n  private _share() {\r\n    this.sendEventRequest(\r\n      {\r\n        key: 'share',\r\n      } as EventParams\r\n    )\r\n  }\r\n\r\n  private _payment(key : string) {\r\n    this.sendEventRequest(\r\n      {\r\n        key,\r\n      } as EventParams\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 进入应用\r\n   * @param {any} options 应用参数\r\n   */\r\n  launch(options : any) {\r\n    // 重置页面停留时长\r\n    set_page_residence_time()\r\n    // 告诉report是应用进来的\r\n    this.licationShow = true\r\n    // 存储应用传入值\r\n    dbSet('__launch_options', options)\r\n    // 应用初始上报参数为1\r\n    // TODO 这里应该是 把 options 都结构到下面对象中，目前unix只有path ，所以这段代码后续需要改一下\r\n    // let request_option : OnLaunchOptionsWithCst = {\r\n    // \t...options,\r\n    // \tcst: ReprotCstType.AppNormal\r\n    // }\r\n    let request_option : OnLaunchOptionsWithCst = {\r\n      // @ts-ignore\r\n      path: (options as OnLaunchOptions).path,\r\n      cst: ReprotCstType.AppNormal\r\n    }\r\n    // #ifdef MP-WEIXIN\r\n    // TODO 安卓没有 scene ，需要补一个\r\n    // @ts-ignore\r\n    request_option.scene = (options as OnLaunchOptions).scene\r\n    // #endif\r\n\r\n    // 上报数据\r\n    this.sendAppRequest(request_option, true)\r\n  }\r\n  /**\r\n   * 进入应用\r\n   * @description 上报主要数据采集是从onShow\r\n   */\r\n  load() {\r\n    // 记录当前页面实例\r\n    // this.appInstance = appInstance\r\n  }\r\n\r\n  /**\r\n   * 进入应用或应用从后台进入前台\r\n   */\r\n  appShow() {\r\n    // 通过 licationHide 判断,保证是进入后台后在次进入应用，避免重复上报数据\r\n    // 当前方法在应用声明周期内，只会触发一次，即首次进入应用触发\r\n\r\n    if (!this.licationHide) return\r\n    const time = get_residence_time('app')\r\n    // 需要判断进入后台是否超过时限 ，默认是 5min ，是的话需要执行进入应用的上报\r\n    if (time.overtime) {\r\n      let lastPageRoute = uni.getStorageSync('UNI_STAT_LAST_PAGE_ROUTE') as string\r\n      let options : OnLaunchOptionsWithCst = {\r\n        path: lastPageRoute,\r\n        scene: this.statData.sc,\r\n        cst: ReprotCstType.AppAwakenTimeout,\r\n      }\r\n      this.sendAppRequest(options)\r\n    }\r\n    // 状态重置\r\n    this.licationHide = false\r\n  }\r\n\r\n  /**\r\n   * 引用进入后台触发\r\n   * @param {Boolean} type 是否立即触发上报\r\n   */\r\n  appHide(type : boolean = false) {\r\n    // 进入应用后台保存状态，方便进入前台后判断是否上报应用数据\r\n    this.licationHide = true\r\n    const time = get_residence_time('outher')\r\n\r\n    const route = get_route().fullpath\r\n    uni.setStorageSync('UNI_STAT_LAST_PAGE_ROUTE', route)\r\n\r\n    const formdata : PageParams = {\r\n      url: route,\r\n      urlref: route,\r\n      urlref_ts: time.residenceTime,\r\n      // urlref_tt: ''\r\n    }\r\n\r\n\r\n    this.sendHideRequest(formdata, type)\r\n    // 更新页面首次访问时间\r\n    set_first_time()\r\n  }\r\n\r\n  /**\r\n   * 进入页面触发\r\n   * @param {Page } self 当前页面实例\r\n   */\r\n  // @ts-ignore\r\n  pageShow(self : Page) {\r\n    // 初始化，标题数据。清空值，避免污染后面的上报数据\r\n    this._navigationBarTitle = { config: '', page: '', report: '', lt: '' } as TitleConfigParams\r\n\r\n    // 获取页面路径\r\n    const { path, fullpath } = get_route(self)\r\n\r\n    // 获取页面标题\r\n    const pageTitle = get_page_name(path)\r\n    this._navigationBarTitle.config = pageTitle\r\n\r\n\r\n    // 表示应用触发 ，页面切换不触发之后的逻辑\r\n    if (this.licationShow) {\r\n      // 更新页面首次访问时间\r\n      set_first_time()\r\n      uni.setStorageSync('UNI_STAT_LAST_PAGE_ROUTE', fullpath)\r\n      this.licationShow = false\r\n      return\r\n    }\r\n    // 页面进入\r\n    const time = get_residence_time('page')\r\n    // 停留时间,判断是否长时间停留在当前页面，如果超过30min重新上报数据\r\n    if (time.overtime) {\r\n      let options : OnLaunchOptionsWithCst = {\r\n        path: fullpath,\r\n        scene: this.statData.sc,\r\n        cst: ReprotCstType.PageStayTimeout,\r\n      }\r\n      this.sendAppRequest(options)\r\n    }\r\n    // 更新页面首次访问时间\r\n    set_first_time()\r\n  }\r\n\r\n  /**\r\n   * 离开页面触发\r\n   * @param {ComponentPublicInstance } self 当前页面实例\r\n   */\r\n  // @ts-ignore\r\n  pageHide(self : Page) {\r\n    // 如果进入后台则不触发后续 页面隐藏的逻辑\r\n    if (this.licationHide) return\r\n    const time = get_residence_time('page')\r\n\r\n    let fullpath = get_route(self).fullpath\r\n    let lastPageRoute = uni.getStorageSync('UNI_STAT_LAST_PAGE_ROUTE')\r\n\r\n    // 如果不存在的话，复制当前的路径，说明之前没有页面\r\n    if (lastPageRoute == null) {\r\n      lastPageRoute = fullpath\r\n    }\r\n    uni.setStorageSync('UNI_STAT_LAST_PAGE_ROUTE', fullpath)\r\n\r\n    const options : PageParams = {\r\n      url: fullpath,\r\n      urlref: lastPageRoute as string,\r\n      urlref_ts: time.residenceTime,\r\n      urlref_tt: ''\r\n    }\r\n\r\n    this.sendPageRequest(options)\r\n  }\r\n\r\n  appError(em : any) {\r\n    let errmsg : string\r\n    // #ifdef APP-ANDROID\r\n    // @ts-ignore\r\n    if (em instanceof Exception) {\r\n      errmsg = em.stackTraceToString()\r\n    } else if (em instanceof Error) {\r\n      errmsg = em.message\r\n    } else {\r\n      errmsg = JSON.stringify(em)\r\n    }\r\n    // #endif\r\n    // #ifndef APP-ANDROID\r\n    // 处理h5\r\n    errmsg = em.stack ?? em.message\r\n    // #endif\r\n\r\n    let route = get_route().path\r\n\r\n    let options : StatDefault = {\r\n      ak: this.statData.ak,\r\n      uuid: this.statData.uuid,\r\n      p: this.statData.p,\r\n      lt: '31',\r\n      url: route,\r\n      ut: this.statData.ut,\r\n      ch: this.statData.ch,\r\n      mpsdk: this.statData.mpsdk,\r\n      mpv: this.statData.mpv,\r\n      v: this.statData.v,\r\n      em: errmsg,\r\n      usv: this.statData.usv,\r\n      t: get_time(),\r\n    }\r\n\r\n    this.request(options, false)\r\n  }\r\n\r\n  /**\r\n   * 应用崩溃时触发 ，只有 app 生效\r\n   * @param {string[] } crash_data 崩溃日志数组\r\n   */\r\n  appCrash(crash_data : string[]) {\r\n    const statdata = this.statData\r\n    let options : StatDefault = {\r\n      \"lt\": \"41\", // 统计数据类型\r\n      \"uuid\": statdata.uuid,\r\n      \"ak\": statdata.ak, // DCloud appid\r\n      \"v\": statdata.v, // 应用版本号\r\n      \"ut\": statdata.ut, // 平台\r\n      \"p\": statdata.p, // 手机系统\r\n      \"ch\": statdata.ch, // 渠道信息\r\n      \"mpsdk\": statdata.mpsdk, // 小程序 SDK Version\r\n      \"did\": statdata.uuid, // deviceId\r\n      \"net\": statdata.net, // 设备网络型号\r\n      \"os\": statdata.mpn, // 系统版本\r\n      \"sv\": statdata.sv, // 系统版本名称\r\n      \"brand\": statdata.brand, // 手机品牌\r\n      \"md\": statdata.md, // 手机型号\r\n      \"root\": statdata.root, // 是否root\r\n      // \"batlevel\": \"\", // 设备电池电量\r\n      // \"battemp\": \"\", // 电池温度\r\n      // \"memuse\": \"\", // 系统已使用内存\r\n      // \"memtotal\": \"\", // 系统总内存\r\n      // \"diskuse\": \"\", // 系统磁盘已使用大小\r\n      // \"disktotal\": \"\", // 系统磁盘总大小\r\n      // \"abis\": \"\", // 设备支持的CPU架构\r\n      // \"appcount\": \"\", // 运行的app个数\r\n      // \"mem\": \"\", // APP使用的内存量\r\n      // \"wvcount\": \"\", // 打开Webview窗口的个数\r\n      // \"duration\": \"\", // APP使用时长\r\n      // \"fore\": \"\", // 是否前台运行\r\n      \"pn\": statdata.pn, // 原生应用包名\r\n      \"pv\": statdata.pv, // 应用版本名称\r\n      // \"url\": \"\", // 页面url\r\n      \"log\": \"\" // 错误日志\r\n    }\r\n\r\n    get_net().then((net : string) => {\r\n      options.net = net\r\n      this.crashRequest(options, crash_data)\r\n    }).catch(() => {\r\n      this.crashRequest(options, crash_data)\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * 发送请求,应用维度上报\r\n   * @param {Object} options 页面信息\r\n   * @param {Boolean} type 是否立即上报\r\n   */\r\n  sendAppRequest(options : OnLaunchOptionsWithCst, type : boolean = false) {\r\n\r\n    let is_opt = options.query != null && JSON.stringify(options.query) != '{}'\r\n    // TODO ，此处处理的值有问题，\r\n    // 如果页面有参数 需要上传如：/xxx/xxx?{xx:xx,xxx:xxx} 格式的值\r\n    let query = is_opt ? '?' + JSON.stringify(options.query) : ''\r\n    // 获取首次访问时间\r\n    const first_time = get_first_visit_time()\r\n    // 获取应用最后访问时间\r\n    const last_time = get_last_visit_time()\r\n    // 非老用户\r\n    if (last_time != 0) {\r\n      const odid = get_odid()\r\n      // TODO 老版本的odid兼容问题，看看是否需要保留\r\n      const have_device = is_handle_device()\r\n      // 如果没有上报过设备信息 ，则需要上报设备信息\r\n      if (!have_device) {\r\n        this.statData.odid = odid\r\n      }\r\n    }\r\n    this.statData.lt = ReportType.AppStart\r\n    this.statData.url = options.path + query\r\n    this.statData.t = get_time()\r\n    this.statData.sc = get_scene(options)\r\n    this.statData.fvts = first_time\r\n    this.statData.lvts = last_time\r\n    this.statData.tvc = get_total_visit_count()\r\n    this.statData.cst = options.cst ?? ReprotCstType.AppNormal\r\n\r\n    // TODO 获取应用版本，网络信息和地址信息\r\n    // if (get_platform_name() === 'n') {\r\n    // \tthis.getProperty(type)\r\n    // } else {\r\n    // \tthis.getNetworkInfo(type)\r\n    // }\r\n\r\n\r\n    this.request(this.statData, type)\r\n  }\r\n\r\n  /**\r\n   * 发送请求,页面维度上报\r\n   * @param {Object} opt\r\n   */\r\n  sendPageRequest(opt : PageParams) {\r\n    let { url, urlref, urlref_ts } = opt\r\n    this._navigationBarTitle.lt = ReportType.PageShow\r\n    let options : StatDefault = {\r\n      ak: this.statData.ak,\r\n      uuid: this.statData.uuid,\r\n      p: this.statData.p,\r\n      lt: ReportType.PageShow,\r\n      ut: this.statData.ut,\r\n      url,\r\n      // TODO 好像是没有这个参数,看一下具体描述\r\n      tt: this.statData.tt,\r\n      urlref,\r\n      urlref_ts,\r\n      ch: this.statData.ch,\r\n      usv: this.statData.usv,\r\n      t: get_time(),\r\n    }\r\n    this.request(options)\r\n  }\r\n\r\n  /**\r\n   * 进入后台上报数据\r\n   * @param {Object} opt 页面进入应用参数\r\n   * @param {Boolean} type 是否立即上报数据\r\n   */\r\n  sendHideRequest(opt : PageParams, type : boolean) {\r\n    let { urlref, urlref_ts } = opt\r\n    let options : StatDefault = {\r\n      ak: this.statData.ak,\r\n      uuid: this.statData.uuid,\r\n      p: this.statData.p,\r\n      lt: ReportType.AppHide,\r\n      ut: this.statData.ut,\r\n      urlref: urlref,\r\n      urlref_ts: urlref_ts,\r\n      ch: this.statData.ch,\r\n      usv: this.statData.usv,\r\n      t: get_time(),\r\n    }\r\n    this.request(options, type)\r\n  }\r\n\r\n  /**\r\n   * 推送数据上报\r\n   * @param {any} options\r\n   * @param {string} cid\r\n   */\r\n  sendPushRequest(options : any, cid : string) {\r\n    let time = get_time()\r\n\r\n    const statData : StatDefault = {\r\n      uuid: this.statData.uuid,\r\n      p: this.statData.p,\r\n      ak: this.statData.ak,\r\n      lt: ReportType.Push,\r\n      cid: cid,\r\n      t: time,\r\n      ut: this.statData.ut,\r\n    }\r\n\r\n    const dataStr = JSON.stringify(statData)\r\n\r\n    // #ifdef WEB\r\n    // @ts-ignore\r\n    let uniStatData = JSON.parse(dataStr) as Map<string, StatDefault[]>\r\n    // @ts-ignore\r\n    uniStatData = new Map(Object.entries(uniStatData))\r\n    // #endif\r\n    // #ifndef WEB\r\n    // @ts-ignore\r\n    let uniStatData = JSON.parse<Map<string, StatDefault[]>>(dataStr)\r\n\r\n    if (uniStatData == null) {\r\n      uniStatData = new Map([])\r\n    }\r\n    // #endif\r\n\r\n\r\n    const hasKey = uniStatData.has(ReportType.Push)\r\n    if (!hasKey) {\r\n      uniStatData.set(ReportType.Push, [])\r\n    }\r\n\r\n    // 将消息加入对列\r\n    uniStatData.get(ReportType.Push)!.push(statData)\r\n\r\n    const stat_data = handle_data(uniStatData)\r\n    let optionsData : RequestData = {\r\n      usv: STAT_VERSION, //统计 SDK 版本号\r\n      t: time, //发送请求时的时间戮\r\n      requests: stat_data,\r\n    }\r\n\r\n    this.sendRequest(optionsData)\r\n  }\r\n\r\n\r\n  /**\r\n   * 自定义事件上报\r\n   * @param {EventParams} data 事件参数\r\n   */\r\n  sendEventRequest(data : EventParams) {\r\n    const key = data.key\r\n    const value = data.value ?? ''\r\n\r\n    let routepath = get_route().fullpath\r\n    const lt = ReportType.Event\r\n    this._navigationBarTitle.config = get_page_name(routepath)\r\n    this._navigationBarTitle.lt = lt\r\n    let options : StatDefault = {\r\n      ak: this.statData.ak,\r\n      uuid: this.statData.uuid,\r\n      p: this.statData.p,\r\n      lt: lt,\r\n      ut: this.statData.ut,\r\n      url: routepath,\r\n      ch: this.statData.ch,\r\n      e_n: key,\r\n      e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\r\n      usv: this.statData.usv,\r\n      t: get_time(),\r\n    }\r\n    this.request(options)\r\n  }\r\n\r\n  /**\r\n   * 崩溃请求发送请求\r\n   * @param {StatDefault} data 上报数据\r\n   * @param {Object} type 是否上报\r\n   */\r\n  crashRequest(data : StatDefault, crash_data : string[]) {\r\n    // let data = JSON.parse(JSON.stringify(stata_data))\r\n    const statConfig = Config.getOptions()\r\n    let time = get_time()\r\n\r\n    // 需要把标题插入到数据中\r\n    const title = this._navigationBarTitle\r\n    data.ttn = title.page\r\n    data.ttpj = title.config\r\n    data.ttc = title.report\r\n\r\n    // 获取消息对列\r\n    let statData = dbGet<string>('__UNI__STAT__DATA')\r\n\r\n    if (statData == null) {\r\n      statData = '{}'\r\n    }\r\n\r\n\r\n    let uniStatData = JSON.parse<Map<string, StatDefault[]>>(statData)\r\n\r\n    if (uniStatData == null) {\r\n      uniStatData = new Map([])\r\n    }\r\n\r\n    // 循环崩溃日志 并加入队列\r\n    for (let i = 0; i < crash_data.length; i++) {\r\n      const log = crash_data[i]\r\n      data.log = log\r\n\r\n      if (statConfig.debug!) {\r\n        // 打印输出日志\r\n        Log(data)\r\n      }\r\n\r\n      const lt = data.lt!\r\n\r\n      const hasKey = uniStatData.has(lt)\r\n      if (!hasKey) {\r\n        uniStatData.set(lt, [])\r\n      }\r\n      // 将消息加入对列\r\n      uniStatData.get(lt)!.push(data)\r\n\r\n    }\r\n    // 将 map 转换为 str\r\n    const statDataStr = Map2String(uniStatData)\r\n    // 存储\r\n    dbSet('__UNI__STAT__DATA', statDataStr)\r\n\r\n    if (statConfig.debug!) {\r\n      // 待上传消息对列\r\n      // console.log(`=== 统计待上传队列数据 ===`)\r\n      const statJSON = Map2Json(uniStatData)\r\n      console.log('=== 统计待上传队列数据 :', statJSON)\r\n      // console.log(`=== 采集结束 ===`)\r\n    }\r\n\r\n    const stat_data = handle_data(uniStatData)\r\n    let optionsData : RequestData = {\r\n      usv: STAT_VERSION, //统计 SDK 版本号\r\n      t: time, //发送请求时的时间戮\r\n      requests: stat_data,\r\n    }\r\n\r\n    // 重置队列\r\n    dbRemove('__UNI__STAT__DATA')\r\n\r\n    this.sendRequest(optionsData, true)\r\n  }\r\n  /**\r\n   * 发送请求\r\n   * @param {StatDefault} data 上报数据\r\n   * @param {Object} type 类型\r\n   */\r\n  request(data : StatDefault, type : boolean = false) {\r\n    const statConfig = Config.getOptions()\r\n    let time = get_time()\r\n\r\n    // 需要把标题插入到数据中\r\n    const title = this._navigationBarTitle\r\n    data.ttn = title.page\r\n    data.ttpj = title.config\r\n    data.ttc = title.report\r\n\r\n    if (statConfig.debug!) {\r\n      // 打印输出日志\r\n      Log(data)\r\n    }\r\n\r\n    const lt = data.lt!\r\n\r\n    // 获取消息对列\r\n    let statData = dbGet<string>('__UNI__STAT__DATA')\r\n\r\n    if (statData == null) {\r\n      statData = '{}'\r\n    }\r\n\r\n\r\n    let uniStatData = JSON.parse<Map<string, StatDefault[]>>(statData)\r\n\r\n    if (uniStatData == null) {\r\n      uniStatData = new Map([])\r\n    }\r\n\r\n    const hasKey = uniStatData.has(lt)\r\n    if (!hasKey) {\r\n      uniStatData.set(lt, [])\r\n    }\r\n\r\n    // 将消息加入对列\r\n    uniStatData.get(lt)!.push(data)\r\n\r\n    // 将 map 转换为 str\r\n    const statDataStr = Map2String(uniStatData)\r\n    // 存储\r\n    dbSet('__UNI__STAT__DATA', statDataStr)\r\n\r\n    let page_residence_time = get_page_residence_time()\r\n\r\n    // 判断时候到达上报时间 ，默认 10 秒上报\r\n    const is_timeout = page_residence_time < this.eportInterval && !type\r\n\r\n    if (is_timeout) return\r\n\r\n    // 时间超过，重新获取时间戳\r\n    set_page_residence_time()\r\n\r\n    if (statConfig.debug!) {\r\n      // 待上传消息对列\r\n      // console.log(`=== 统计待上传队列数据 ===`)\r\n      const statJSON = Map2Json(uniStatData)\r\n      console.log('=== 统计待上传队列数据 :', statJSON)\r\n      // console.log(`=== 采集结束 ===`)\r\n    }\r\n\r\n\r\n\r\n    const stat_data = handle_data(uniStatData)\r\n\r\n    let optionsData : RequestData = {\r\n      usv: STAT_VERSION, //统计 SDK 版本号\r\n      t: time, //发送请求时的时间戮\r\n      requests: stat_data,\r\n    }\r\n\r\n    // 重置队列\r\n    dbRemove('__UNI__STAT__DATA')\r\n\r\n    this.sendRequest(optionsData)\r\n  }\r\n\r\n  sendRequest(options : RequestData, delCrash : boolean = false) {\r\n    const statConfig = Config.getOptions()\r\n\r\n    if (Report.uniCloudInstance != null) {\r\n\r\n      // 数据上报\r\n      const app = Report.uniCloudInstance!\r\n\r\n      // #ifdef APP-ANDROID\r\n      // @ts-ignore\r\n      const uniCloudObj = app.importObject('uni-stat-receiver', {\r\n        customUI: true,\r\n        // @ts-ignore\r\n      } as UniCloudImportObjectOptions, UTSAndroid.getJavaClass(CloudObjectToDo))\r\n      // #endif\r\n      // #ifndef APP-ANDROID\r\n      // @ts-ignore\r\n      const uniCloudObj = app.importObject(\r\n        'uni-stat-receiver',\r\n        {\r\n          customUI: true,\r\n        } as UniCloudImportObjectOptions\r\n      )\r\n      // #endif\r\n\r\n\r\n      uniCloudObj\r\n        .report(options)\r\n        .then(() => {\r\n          if (statConfig.debug!) {\r\n            console.log(`=== 统计队列数据上报 :`, options)\r\n          }\r\n          // #ifdef APP\r\n          if (delCrash) {\r\n            try {\r\n              uni.__deleteAppCrashInfo(null)\r\n            } catch (err) {\r\n              console.log('=== 应用崩溃日志上传失败 :', JSON.stringify(err))\r\n            }\r\n          }\r\n          // #endif\r\n\r\n        })\r\n        .catch((err : any | null) => {\r\n          console.log('=== 统计上报错误 :', JSON.stringify(err))\r\n        })\r\n    }\r\n\r\n  }\r\n}\n"],"names":["get_report_Interval","OPERATING_TIME","TitleConfigParams","get_default_data","uni","EventParams","set_page_residence_time","dbSet","ReprotCstType","get_residence_time","get_route","PageParams","set_first_time","get_page_name","StatDefault","get_time","get_net","get_first_visit_time","get_last_visit_time","get_odid","is_handle_device","ReportType","get_scene","get_total_visit_count","handle_data","RequestData","STAT_VERSION","Config","dbGet","Log","Map2String","Map2Json","dbRemove","get_page_residence_time"],"mappings":";;;;;;;;;MA0Ba,OAAM;AAAA,EAoBjB,cAAA;AAfA,SAAY,eAAa;AAEzB,SAAY,eAAa;AAIzB,SAAA,gBAAgBA,qEAAoBC,yCAAAA,cAAc;AAElD,SAAA,sBAA0C,IAAAC,uDAAA;AAAA,MACxC,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,IAAI;AAAA,KACgB;AAGpB,SAAK,WAAWC,iDAAAA;AAIhB,QAAI,sBAAsB,OAAOC,oBAAI,mBAAmB;AACxD,QAAI,qBAAqB;AACvB,WAAK,mBAAkB;AACvB,WAAK,eAAc;AACnB,WAAK,eAAe,IAAI;AACxB,WAAK,wBAAuB;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKD,qBAAkB;AAChB,QAAI,OAAO;AAEXA,kBAAG,MAAC,eAAe,yBAAyB;AAAA;AAAA,MAE1C,OAAO,MAAmC;AACxC,aAAK,oBAAoB,OAAO,KAAK;AAAA,MACtC;AAAA;AAAA,IAEa,CAAA;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKD,iBAAc;AACZ,QAAI,OAAO;AAEXA,kBAAG,MAAC,eAAe,SAAS;AAAA,MAC1B,WAAQ;AACN,aAAK,OAAM;AAAA,MACZ;AAAA;AAAA,IAEa,CAAA;AAAA,EACjB;AAAA,EACD,eAAe,OAAiB,OAAK;AACnC,QAAI,OAAO;AACX,QAAI,CAAC,MAAM;AACT,WAAK,OAAM;AACX,aAAM;AAAA,IACP;AAEDA,kBAAG,MAAC,eAAe,SAAS;AAAA,MAC1B,WAAQ;AACN,aAAK,OAAM;AAAA,MACZ;AAAA;AAAA,IAEa,CAAA;AAAA,EACjB;AAAA,EACD,0BAAuB;AACrB,QAAI,OAAO;AAEXA,kBAAG,MAAC,eAAe,kBAAkB;AAAA,MACnC,UAAO;AACL,aAAK,SAAS,aAAa;AAAA,MAC5B;AAAA,MACD,OAAI;AACF,aAAK,SAAS,UAAU;AAAA,MACzB;AAAA;AAAA,IAEa,CAAA;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKO,SAAM;AACZ,SAAK,iBACH,IAAAC,iDAAA;AAAA,MACE,KAAK;AAAA,IACS,CAAA,CAAA;AAAA,EAEnB;AAAA,EAEO,SAAM;AACZ,SAAK,iBACH,IAAAA,iDAAA;AAAA,MACE,KAAK;AAAA,IACS,CAAA,CAAA;AAAA,EAEnB;AAAA,EAEO,SAAS,KAAY;AAC3B,SAAK,iBACH,IAAAA,iDAAA;AAAA,MACE;AAAA,IACc,CAAA,CAAA;AAAA,EAEnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,UAAa,MAAA;AAElBC,qDAAAA;AAEA,SAAK,eAAe;AAEpBC,qDAAM,oBAAoB,OAAO;AAOjC,QAAI,iBAA0C,IAAA;AAAA,MAAA;AAAA;AAAA,QAE5C,MAAO,QAA4B;AAAA,QACnC,KAAKC,gDAAa,cAAC;AAAA,MACpB;AAAA;AAAA;AAAA;AAID,mBAAe,QAAS,QAA4B;AAIpD,SAAK,eAAe,gBAAgB,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,OAAI;AAAA,EAGH;AAAA;AAAA;AAAA;AAAA,EAKD,UAAO;AAIL,QAAI,CAAC,KAAK;AAAc,aAAM;AAC9B,UAAM,OAAOC,oEAAmB,KAAK;AAErC,QAAI,KAAK,UAAU;AACjB,UAAI,gBAAgBL,cAAAA,MAAI,eAAe,0BAA0B;AACjE,UAAI,UAAmC,IAAA,cAAA;AAAA,QACrC,MAAM;AAAA,QACN,OAAO,KAAK,SAAS;AAAA,QACrB,KAAKI,gDAAa,cAAC;AAAA,MACpB,CAAA;AACD,WAAK,eAAe,OAAO;AAAA,IAC5B;AAED,SAAK,eAAe;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQ,OAAiB,OAAK;AAE5B,SAAK,eAAe;AACpB,UAAM,OAAOC,oEAAmB,QAAQ;AAExC,UAAM,QAAQC,2DAAW,EAAC;AAC1BN,kBAAAA,MAAI,eAAe,4BAA4B,KAAK;AAEpD,UAAM,WAAwB,IAAAO,gDAAA;AAAA,MAC5B,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,WAAW,KAAK;AAAA;AAAA,IAEjB,CAAA;AAGD,SAAK,gBAAgB,UAAU,IAAI;AAEnCC,qDAAAA;EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAAS,MAAW;AAElB,SAAK,sBAAmB,IAAAV,qCAAA;AAAA,MAAG,EAAE,QAAQ,IAAI,MAAM,IAAI,QAAQ,IAAI,IAAI,GAAyB;AAAA;AAAA;AAGtF,UAAA,KAAqBQ,2DAAU,IAAI,GAAjC,OAAI,GAAA,MAAE,WAAQ,GAAA;AAGtB,UAAM,YAAYG,+DAAc,IAAI;AACpC,SAAK,oBAAoB,SAAS;AAIlC,QAAI,KAAK,cAAc;AAErBD,uDAAAA;AACAR,oBAAAA,MAAI,eAAe,4BAA4B,QAAQ;AACvD,WAAK,eAAe;AACpB,aAAM;AAAA,IACP;AAED,UAAM,OAAOK,oEAAmB,MAAM;AAEtC,QAAI,KAAK,UAAU;AACjB,UAAI,UAAmC,IAAA,cAAA;AAAA,QACrC,MAAM;AAAA,QACN,OAAO,KAAK,SAAS;AAAA,QACrB,KAAKD,gDAAa,cAAC;AAAA,MACpB,CAAA;AACD,WAAK,eAAe,OAAO;AAAA,IAC5B;AAEDI,qDAAAA;EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAAS,MAAW;AAElB,QAAI,KAAK;AAAc,aAAM;AAC7B,UAAM,OAAOH,oEAAmB,MAAM;AAEtC,QAAI,WAAWC,iDAAAA,UAAU,IAAI,EAAE;AAC/B,QAAI,gBAAgBN,cAAAA,MAAI,eAAe,0BAA0B;AAGjE,QAAI,iBAAiB,MAAM;AACzB,sBAAgB;AAAA,IACjB;AACDA,kBAAAA,MAAI,eAAe,4BAA4B,QAAQ;AAEvD,UAAM,UAAuB,IAAAO,gDAAA;AAAA,MAC3B,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,WAAW,KAAK;AAAA,MAChB,WAAW;AAAA,IACZ,CAAA;AAED,SAAK,gBAAgB,OAAO;AAAA,EAC7B;AAAA,EAED,SAAS,KAAQ,MAAA;;AACf,QAAI;AAaJ,mBAAS,GAAG,WAAS,QAAA,OAAA,SAAA,KAAA,GAAG;AAGxB,QAAI,QAAQD,2DAAW,EAAC;AAExB,QAAI,UAAwB,IAAAI,iDAAA;AAAA,MAC1B,IAAI,KAAK,SAAS;AAAA,MAClB,MAAM,KAAK,SAAS;AAAA,MACpB,GAAG,KAAK,SAAS;AAAA,MACjB,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,IAAI,KAAK,SAAS;AAAA,MAClB,IAAI,KAAK,SAAS;AAAA,MAClB,OAAO,KAAK,SAAS;AAAA,MACrB,KAAK,KAAK,SAAS;AAAA,MACnB,GAAG,KAAK,SAAS;AAAA,MACjB,IAAI;AAAA,MACJ,KAAK,KAAK,SAAS;AAAA,MACnB,GAAGC,iDAAAA,SAAU;AAAA,IACd,CAAA;AAED,SAAK,QAAQ,SAAS,KAAK;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,SAAS,YAAqB;AAC5B,UAAM,WAAW,KAAK;AACtB,QAAI,UAAwB,IAAAD,iDAAA;AAAA,MAC1B,MAAM;AAAA,MACN,QAAQ,SAAS;AAAA,MACjB,MAAM,SAAS;AAAA,MACf,KAAK,SAAS;AAAA,MACd,MAAM,SAAS;AAAA,MACf,KAAK,SAAS;AAAA,MACd,MAAM,SAAS;AAAA,MACf,SAAS,SAAS;AAAA,MAClB,OAAO,SAAS;AAAA,MAChB,OAAO,SAAS;AAAA,MAChB,MAAM,SAAS;AAAA,MACf,MAAM,SAAS;AAAA,MACf,SAAS,SAAS;AAAA,MAClB,MAAM,SAAS;AAAA,MACf,QAAQ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAajB,MAAM,SAAS;AAAA,MACf,MAAM,SAAS;AAAA;AAAA,MAEf,OAAO;AAAA;AAAA,IACR,CAAA;AAEDE,6DAAS,EAAC,KAAK,CAAC,QAAY;AAC1B,cAAQ,MAAM;AACd,WAAK,aAAa,SAAS,UAAU;AAAA,KACtC,EAAE,MAAM,MAAA;AACP,WAAK,aAAa,SAAS,UAAU;AAAA,IACvC,CAAC;AAAA,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,eAAe,SAAkC,OAAiB,OAAK;;AAErE,QAAI,SAAS,QAAQ,SAAS,QAAQ,IAAK,KAAA,UAAU,QAAQ,KAAK,KAAK;AAGvE,QAAI,QAAQ,SAAS,MAAM,IAAA,KAAK,UAAU,QAAQ,KAAK,IAAI;AAE3D,UAAM,aAAaC,iDAAAA;AAEnB,UAAM,YAAYC,iDAAAA;AAElB,QAAI,aAAa,GAAG;AAClB,YAAM,OAAOC,iDAAAA;AAEb,YAAM,cAAcC,iDAAAA;AAEpB,UAAI,CAAC,aAAa;AAChB,aAAK,SAAS,OAAO;AAAA,MACtB;AAAA,IACF;AACD,SAAK,SAAS,KAAKC,gDAAAA,WAAW;AAC9B,SAAK,SAAS,MAAM,QAAQ,OAAO;AACnC,SAAK,SAAS,IAAIN,iDAAAA;AAClB,SAAK,SAAS,KAAKO,iDAAS,UAAC,OAAO;AACpC,SAAK,SAAS,OAAO;AACrB,SAAK,SAAS,OAAO;AACrB,SAAK,SAAS,MAAMC,iDAAAA;AACpB,SAAK,SAAS,OAAM,KAAA,QAAQ,SAAG,QAAA,OAAA,SAAA,KAAIf,gDAAAA,cAAc;AAUjD,SAAK,QAAQ,KAAK,UAAU,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,gBAAgB,KAAgB;AACxB,QAAA,MAA2B,IAAG,KAAzB,SAAsB,IAAG,QAAjB,YAAc;AACjC,SAAK,oBAAoB,KAAKa,gDAAAA,WAAW;AACzC,QAAI,UAAwB,IAAAP,iDAAA;AAAA,MAC1B,IAAI,KAAK,SAAS;AAAA,MAClB,MAAM,KAAK,SAAS;AAAA,MACpB,GAAG,KAAK,SAAS;AAAA,MACjB,IAAIO,gDAAU,WAAC;AAAA,MACf,IAAI,KAAK,SAAS;AAAA,MAClB;AAAA;AAAA,MAEA,IAAI,KAAK,SAAS;AAAA,MAClB;AAAA,MACA;AAAA,MACA,IAAI,KAAK,SAAS;AAAA,MAClB,KAAK,KAAK,SAAS;AAAA,MACnB,GAAGN,iDAAAA,SAAU;AAAA,IACd,CAAA;AACD,SAAK,QAAQ,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,gBAAgB,KAAkB,MAAc;AACxC,QAAA,SAAsB,IAAG,QAAjB,YAAc,IAAG;AAC/B,QAAI,UAAwB,IAAAD,iDAAA;AAAA,MAC1B,IAAI,KAAK,SAAS;AAAA,MAClB,MAAM,KAAK,SAAS;AAAA,MACpB,GAAG,KAAK,SAAS;AAAA,MACjB,IAAIO,gDAAU,WAAC;AAAA,MACf,IAAI,KAAK,SAAS;AAAA,MAClB;AAAA,MACA;AAAA,MACA,IAAI,KAAK,SAAS;AAAA,MAClB,KAAK,KAAK,SAAS;AAAA,MACnB,GAAGN,iDAAAA,SAAU;AAAA,IACd,CAAA;AACD,SAAK,QAAQ,SAAS,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,gBAAgB,UAAa,MAAE,KAAY;AACzC,QAAI,OAAOA,iDAAAA;AAEX,UAAM,WAAyB,IAAAD,iDAAA;AAAA,MAC7B,MAAM,KAAK,SAAS;AAAA,MACpB,GAAG,KAAK,SAAS;AAAA,MACjB,IAAI,KAAK,SAAS;AAAA,MAClB,IAAIO,gDAAU,WAAC;AAAA,MACf;AAAA,MACA,GAAG;AAAA,MACH,IAAI,KAAK,SAAS;AAAA,IACnB,CAAA;AAED,UAAM,UAAU,IAAA,KAAK,UAAU,QAAQ;AAUvC,QAAI,cAAc,IAAA,KAAK,MAAkC;AAEzD,QAAI,eAAe,MAAM;AACvB,oBAAc,oBAAI,IAAI,CAAA,CAAE;AAAA,IACzB;AAID,UAAM,SAAS,YAAY,IAAIA,gDAAU,WAAC,IAAI;AAC9C,QAAI,CAAC,QAAQ;AACX,kBAAY,IAAIA,gDAAAA,WAAW,MAAM,CAAE,CAAA;AAAA,IACpC;AAGD,QAAA,OAAA,aAAgBA,gDAAAA,WAAW,IAAI,EAAG,KAAK,QAAQ;AAE/C,UAAM,YAAYG,0DAAY,WAAW;AACzC,QAAI,cAA4B,IAAAC,iDAAA;AAAA,MAC9B,KAAKC,yCAAY;AAAA,MACjB,GAAG;AAAA,MACH,UAAU;AAAA,IACX,CAAA;AAED,SAAK,YAAY,WAAW;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,iBAAiB,MAAkB;;AACjC,UAAM,MAAM,KAAK;AACjB,UAAM,SAAQ,KAAA,KAAK,WAAK,QAAA,OAAA,SAAA,KAAI;AAE5B,QAAI,YAAYhB,2DAAW,EAAC;AAC5B,UAAM,KAAKW,gDAAU,WAAC;AACtB,SAAK,oBAAoB,SAASR,iDAAa,cAAC,SAAS;AACzD,SAAK,oBAAoB,KAAK;AAC9B,QAAI,UAAwB,IAAAC,iDAAA;AAAA,MAC1B,IAAI,KAAK,SAAS;AAAA,MAClB,MAAM,KAAK,SAAS;AAAA,MACpB,GAAG,KAAK,SAAS;AAAA,MACjB;AAAA,MACA,IAAI,KAAK,SAAS;AAAA,MAClB,KAAK;AAAA,MACL,IAAI,KAAK,SAAS;AAAA,MAClB,KAAK;AAAA,MACL,KAAK,OAAO,UAAU,WAAW,IAAA,KAAK,UAAU,KAAK,IAAI,MAAM,SAAU;AAAA,MACzE,KAAK,KAAK,SAAS;AAAA,MACnB,GAAGC,iDAAAA,SAAU;AAAA,IACd,CAAA;AACD,SAAK,QAAQ,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,MAAoB,YAAqB;AAEpD,UAAM,aAAaY,gDAAO;AAC1B,QAAI,OAAOZ,iDAAAA;AAGX,UAAM,QAAQ,KAAK;AACnB,SAAK,MAAM,MAAM;AACjB,SAAK,OAAO,MAAM;AAClB,SAAK,MAAM,MAAM;AAGjB,QAAI,WAAWa,iDAAc,mBAAmB;AAEhD,QAAI,YAAY,MAAM;AACpB,iBAAW;AAAA,IACZ;AAGD,QAAI,cAAc,IAAA,KAAK,MAAkC;AAEzD,QAAI,eAAe,MAAM;AACvB,oBAAc,oBAAI,IAAI,CAAA,CAAE;AAAA,IACzB;AAGD,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,YAAM,MAAM,WAAW,CAAC;AACxB,WAAK,MAAM;AAEX,UAAI,WAAW,OAAQ;AAErBC,sDAAG,IAAC,IAAI;AAAA,MACT;AAED,YAAM,KAAK,KAAK;AAEhB,YAAM,SAAS,YAAY,IAAI,EAAE;AACjC,UAAI,CAAC,QAAQ;AACX,oBAAY,IAAI,IAAI,CAAA,CAAE;AAAA,MACvB;AAED,UAAA,OAAA,aAAgB,EAAE,EAAG,KAAK,IAAI;AAAA,IAE/B;AAED,UAAM,cAAcC,yDAAW,WAAW;AAE1CvB,qDAAM,qBAAqB,WAAW;AAEtC,QAAI,WAAW,OAAQ;AAGrB,YAAM,WAAWwB,uDAAS,WAAW;AACrC3B,oBAAY,MAAA,MAAA,OAAA,6DAAA,mBAAmB,QAAQ;AAAA,IAExC;AAED,UAAM,YAAYoB,0DAAY,WAAW;AACzC,QAAI,cAA4B,IAAAC;MAAA;AAAA,QAC9B,KAAKC,yCAAY;AAAA,QACjB,GAAG;AAAA,QACH,UAAU;AAAA,MACX;AAAA;AAAA;AAGDM,+CAAQ,SAAC,mBAAmB;AAE5B,SAAK,YAAY,aAAa,IAAI;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,QAAQ,MAAoB,OAAiB,OAAK;AAChD,UAAM,aAAaL,gDAAO;AAC1B,QAAI,OAAOZ,iDAAAA;AAGX,UAAM,QAAQ,KAAK;AACnB,SAAK,MAAM,MAAM;AACjB,SAAK,OAAO,MAAM;AAClB,SAAK,MAAM,MAAM;AAEjB,QAAI,WAAW,OAAQ;AAErBc,oDAAG,IAAC,IAAI;AAAA,IACT;AAED,UAAM,KAAK,KAAK;AAGhB,QAAI,WAAWD,iDAAc,mBAAmB;AAEhD,QAAI,YAAY,MAAM;AACpB,iBAAW;AAAA,IACZ;AAGD,QAAI,cAAc,IAAA,KAAK,MAAkC;AAEzD,QAAI,eAAe,MAAM;AACvB,oBAAc,oBAAI,IAAI,CAAA,CAAE;AAAA,IACzB;AAED,UAAM,SAAS,YAAY,IAAI,EAAE;AACjC,QAAI,CAAC,QAAQ;AACX,kBAAY,IAAI,IAAI,CAAA,CAAE;AAAA,IACvB;AAGD,QAAA,OAAA,aAAgB,EAAE,EAAG,KAAK,IAAI;AAG9B,UAAM,cAAcE,yDAAW,WAAW;AAE1CvB,qDAAM,qBAAqB,WAAW;AAEtC,QAAI,sBAAsB0B,iDAAAA;AAG1B,UAAM,aAAa,sBAAsB,KAAK,iBAAiB,CAAC;AAEhE,QAAI;AAAY,aAAM;AAGtB3B,qDAAAA;AAEA,QAAI,WAAW,OAAQ;AAGrB,YAAM,WAAWyB,uDAAS,WAAW;AACrC3B,oBAAY,MAAA,MAAA,OAAA,6DAAA,mBAAmB,QAAQ;AAAA,IAExC;AAID,UAAM,YAAYoB,0DAAY,WAAW;AAEzC,QAAI,cAA4B,IAAAC;MAAA;AAAA,QAC9B,KAAKC,yCAAY;AAAA,QACjB,GAAG;AAAA,QACH,UAAU;AAAA,MACX;AAAA;AAAA;AAGDM,+CAAQ,SAAC,mBAAmB;AAE5B,SAAK,YAAY,WAAW;AAAA,EAC7B;AAAA,EAED,YAAY,SAAuB,WAAqB,OAAK;AAC3D,UAAM,aAAaL,gDAAO;AAE1B,QAAI,OAAO,oBAAoB,MAAM;AAGnC,YAAM,MAAM,OAAO;AAWnB,YAAM,cAAc,IAAI,aACtB,qBACA;AAAA,QACE,UAAU;AAAA,MACoB,CAAA;AAKlC,kBACG,OAAO,OAAO,EACd,KAAK,MAAA;AACJ,YAAI,WAAW,OAAQ;AACrBvB,wBAAY,MAAA,MAAA,OAAA,6DAAA,kBAAkB,OAAO;AAAA,QACtC;AAAA,MAWH,CAAC,EACA,MAAM,CAAC,MAAgB,SAAA;AACtBA,4BAAA,MAAA,OAAA,6DAAY,gBAAgB,SAAK,UAAU,GAAG,CAAC;AAAA,MACjD,CAAC;AAAA,IACJ;AAAA,EAEF;;AAnuBM,OAAgB,mBAAqB;;"}