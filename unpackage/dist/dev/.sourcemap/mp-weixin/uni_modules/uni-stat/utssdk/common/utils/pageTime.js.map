{"version":3,"file":"pageTime.js","sources":["uni_modules/uni-stat/utssdk/common/utils/pageTime.uts"],"sourcesContent":["import { dbGet } from \"./db\"\r\nimport { PAGE_PVER_TIME, APP_PVER_TIME } from '../config.uts';\r\nimport { ResidenceTimeReturn } from '../../interface.uts'\r\nimport { dbSet, dbRemove } from \"./db\";\r\n\r\n// 首次访问时间\r\nconst FIRST_VISIT_TIME_KEY = '__first__visit__time'\r\n// 最后访问时间\r\nconst LAST_VISIT_TIME_KEY = '__last__visit__time'\r\n// 访问总数\r\nconst TOTAL_VISIT_COUNT = '__total__visit__count'\r\nconst FIRST_TIME = '__first_time'\r\n\r\n// 页面停留时间记录key\r\nconst PAGE_RESIDENCE_TIME = '__page__residence__time'\r\nlet First_Page_Residence_Time = 0\r\nlet Last_Page_Residence_Time = 0\r\n\r\n/**\r\n * 获取当前时间\r\n */\r\nexport const get_time = () : number => {\n  return Math.floor(new Date().getTime() / 1000)\r\n}\r\n\r\n\r\n/**\r\n * 设置页面首次访问时间，用户获取页面/应用停留时常\r\n */\r\nexport const set_first_time = () : number => {\r\n\t// 获取当前时间 ，以下代码获取到是毫秒级时间戳 ，实际上用到是秒级时间戳，所以需要除以1000\r\n\t// const time = new Date().getTime()\r\n\tlet time = get_time()\r\n\tdbSet(FIRST_TIME, time)\r\n\treturn time\r\n}\r\n\r\n\r\n\r\n/**\r\n * 获取首次访问时间\r\n */\r\nexport const get_first_visit_time = () : number => {\r\n\tconst timeStorge = dbGet<number>(FIRST_VISIT_TIME_KEY)\r\n\tlet time : number\r\n\tif (timeStorge != null && timeStorge != 0) {\r\n\t\ttime = timeStorge as number\r\n\t} else {\r\n\t\ttime = get_time()\r\n\t\tdbSet(FIRST_VISIT_TIME_KEY, time)\r\n\t\t// 首次访问需要 将最后访问时间置 0\r\n\t\tdbRemove(LAST_VISIT_TIME_KEY)\r\n\t}\r\n\treturn time\r\n}\r\n\r\n/**\r\n * 最后访问时间\r\n */\r\nexport const get_last_visit_time = () : number => {\r\n\tconst timeStorge = dbGet<number>(LAST_VISIT_TIME_KEY)\r\n\tlet time = 0\n\tif (timeStorge != null && timeStorge != 0) {\r\n\t\ttime = timeStorge as number\r\n\t}\n\t\n\tdbSet(LAST_VISIT_TIME_KEY, get_time())\n\treturn time\r\n}\r\n\r\n\r\n/**\r\n * 获取总访问次数\r\n */\r\nexport const get_total_visit_count = () : number => {\r\n\tconst timeStorge = dbGet<number>(TOTAL_VISIT_COUNT)\r\n\tlet count = 1\r\n\tif (timeStorge != null) {\r\n\t\tcount = timeStorge as number\r\n\t\tcount++\r\n\t}\r\n\tdbSet(TOTAL_VISIT_COUNT, count)\r\n\treturn count\r\n}\r\n\r\n/**\r\n * 获取页面 \\ 应用停留时间\r\n */\r\nexport const get_residence_time = (type : string) : ResidenceTimeReturn => {\r\n\tlet residenceTime = 0\r\n\tconst last_time = get_time()\r\n\tconst first_time = (dbGet(FIRST_TIME) ?? last_time) as number\r\n\tif (first_time != 0) {\r\n\t\tresidenceTime = last_time - first_time\r\n\t}\r\n\t// 将毫秒级时间戳转换为秒级时间戳，因为直接获取的是秒级时间戳，所以不需要转换\r\n\t// residenceTime = parseInt(residenceTime / 1000)\r\n\tresidenceTime = residenceTime < 1 ? 1 : residenceTime\r\n\tlet timeData : ResidenceTimeReturn = {\r\n\t\tresidenceTime: residenceTime,\r\n\t\tovertime: false,\r\n\t}\r\n\tif (type === 'app') {\r\n\t\tlet overtime = residenceTime > APP_PVER_TIME ? true : false\r\n\t\ttimeData.overtime = overtime\r\n\t\treturn timeData\r\n\t}\r\n\tif (type === 'page') {\r\n\t\tlet overtime = residenceTime > PAGE_PVER_TIME ? true : false\r\n\t\ttimeData.overtime = overtime\r\n\t\treturn timeData\r\n\t}\r\n\treturn timeData\r\n}\r\n\r\n/**\r\n * 设置页面停留时间\r\n */\r\nexport const set_page_residence_time = () : number => {\r\n\tFirst_Page_Residence_Time = get_time()\r\n\tdbSet(PAGE_RESIDENCE_TIME, First_Page_Residence_Time)\r\n\treturn First_Page_Residence_Time\r\n}\r\n\r\n/**\r\n * 获取页面停留时间\r\n */\r\nexport const get_page_residence_time = () : number => {\r\n\tLast_Page_Residence_Time = get_time()\r\n\tFirst_Page_Residence_Time = dbGet<number>(PAGE_RESIDENCE_TIME) ?? 0\n\tconst diff : number = Last_Page_Residence_Time - First_Page_Residence_Time\r\n\treturn diff\r\n}\n"],"names":["dbSet","dbGet","dbRemove","ResidenceTimeReturn","APP_PVER_TIME","PAGE_PVER_TIME"],"mappings":";;;;AAMA,MAAM,uBAAuB;AAE7B,MAAM,sBAAsB;AAE5B,MAAM,oBAAoB;AAC1B,MAAM,aAAa;AAGnB,MAAM,sBAAsB;AAC5B,IAAI,4BAA4B;AAChC,IAAI,2BAA2B;AAKlB,MAAA,WAAW,MAAA;AACtB,SAAO,KAAK,OAAM,oBAAI,KAAM,GAAC,QAAO,IAAK,GAAI;AAC/C;AAMa,MAAA,iBAAiB,MAAA;AAG7B,MAAI,OAAO;AACXA,mDAAM,YAAY,IAAI;AACtB,SAAO;AACR;AAOa,MAAA,uBAAuB,MAAA;AACnC,QAAM,aAAaC,iDAAc,oBAAoB;AACrD,MAAI;AACJ,MAAI,cAAc,QAAQ,cAAc,GAAG;AAC1C,WAAO;AAAA,EACP,OAAM;AACN,WAAO,SAAQ;AACfD,qDAAM,sBAAsB,IAAI;AAEhCE,+CAAQ,SAAC,mBAAmB;AAAA,EAC5B;AACD,SAAO;AACR;AAKa,MAAA,sBAAsB,MAAA;AAClC,QAAM,aAAaD,iDAAc,mBAAmB;AACpD,MAAI,OAAO;AACX,MAAI,cAAc,QAAQ,cAAc,GAAG;AAC1C,WAAO;AAAA,EACP;AAEDD,mDAAM,qBAAqB,SAAQ,CAAE;AACrC,SAAO;AACR;AAMa,MAAA,wBAAwB,MAAA;AACpC,QAAM,aAAaC,iDAAc,iBAAiB;AAClD,MAAI,QAAQ;AACZ,MAAI,cAAc,MAAM;AACvB,YAAQ;AACR;AAAA,EACA;AACDD,mDAAM,mBAAmB,KAAK;AAC9B,SAAO;AACR;AAKO,MAAM,qBAAqB,CAAC,SAAa;;AAC/C,MAAI,gBAAgB;AACpB,QAAM,YAAY;AAClB,QAAM,cAAc,KAAAC,2CAAAA,MAAM,UAAU,OAAC,QAAA,OAAA,SAAA,KAAI;AACzC,MAAI,cAAc,GAAG;AACpB,oBAAgB,YAAY;AAAA,EAC5B;AAGD,kBAAgB,gBAAgB,IAAI,IAAI;AACxC,MAAI,WAAiC,IAAAE,yDAAA;AAAA,IACpC;AAAA,IACA,UAAU;AAAA,EACV,CAAA;AACD,MAAI,SAAS,OAAO;AACnB,QAAI,WAAW,gBAAgBC,yDAAgB,OAAO;AACtD,aAAS,WAAW;AACpB,WAAO;AAAA,EACP;AACD,MAAI,SAAS,QAAQ;AACpB,QAAI,WAAW,gBAAgBC,0DAAiB,OAAO;AACvD,aAAS,WAAW;AACpB,WAAO;AAAA,EACP;AACD,SAAO;AACR;AAKa,MAAA,0BAA0B,MAAA;AACtC,8BAA4B,SAAQ;AACpCL,mDAAM,qBAAqB,yBAAyB;AACpD,SAAO;AACR;AAKa,MAAA,0BAA0B,MAAA;;AACtC,6BAA2B,SAAQ;AACnC,oCAA4BC,2CAAK,MAAS,mBAAmB,OAAC,QAAA,OAAA,SAAA,KAAI;AAClE,QAAM,OAAgB,2BAA2B;AACjD,SAAO;AACR;;;;;;;;;"}