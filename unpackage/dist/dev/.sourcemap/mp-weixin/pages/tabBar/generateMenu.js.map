{"version":3,"file":"generateMenu.js","sources":["pages/tabBar/generateMenu.uts"],"sourcesContent":["import { pages, groups, subPackages } from '@/pages.json'\r\n\r\ntype Group = {\r\n  id : string,\r\n  name : string,\r\n  children : (Group | null)[] | null\r\n}\r\n\r\ntype PageGroup = {\r\n  id : string,\r\n  name : string,\r\n  index : number\r\n}\r\n\r\ntype Page = {\r\n  path : string,\r\n  style : UTSJSONObject,\r\n  group ?: string | null,\r\n}\r\n\r\nexport type MenuItem = {\r\n  id : string,\r\n  name : string,\r\n  index : number,\r\n  path : string,\r\n  style : UTSJSONObject,\r\n  group ?: string | null,\r\n  items : MenuItem[]\r\n}\r\n\r\nsubPackages.forEach(subPackage => {\r\n  (subPackage.pages as UTSJSONObject[]).forEach(page => {\r\n    (pages as Page[]).push({\r\n      path: `${subPackage.root}/${page.path}`,\r\n      style: page.style as UTSJSONObject,\r\n      group: page.group as string | null\r\n    })\r\n  })\r\n})\r\n\r\nexport function generateMenu(tabBarType : string) : MenuItem[] {\r\n  let res : MenuItem[] = []\r\n  const tabBarPages = JSON.parse<Page[]>(JSON.stringify(pages))!.filter((page : Page) : boolean => page.path.startsWith(tabBarType) && hasPageGroup(page.group))\r\n  const groupTree = JSON.parse<(Group | null)[]>(JSON.stringify(groups))\r\n  let currentMenu : MenuItem | null = null\r\n  tabBarPages.forEach(page => {\r\n    let menuItemArr : MenuItem[] = res\r\n    const groupIndexList = page.group!.split(',').map((index : string) : number => parseInt(index))\r\n    let currentGroups : (Group | null)[] | null = groupTree\r\n    const pageGroups : PageGroup[] = []\r\n    groupIndexList.forEach((groupIndex, index) => {\r\n      // 跳过第一层 component API CSS\r\n      if (index > 0) {\r\n        pageGroups.push({ id: currentGroups![groupIndex]!.id, name: currentGroups![groupIndex]!.name, index: groupIndex } as PageGroup)\r\n      }\r\n      currentGroups = currentGroups![groupIndex]!.children\r\n    })\r\n    const lastGroup = pageGroups[pageGroups.length - 1]\r\n    let hasPageGroup = false\r\n    if (\r\n      (\r\n        page.path.endsWith(camelToDash(lastGroup.name)) ||\r\n        page.path.endsWith(camelToDash(lastGroup.name.replace('uni.', '')))\r\n      ) &&\r\n      pageGroups.length > 1\r\n    ) {\r\n      hasPageGroup = true\r\n      pageGroups.pop()\r\n    }\r\n    const groupLength = pageGroups.length\r\n    pageGroups.forEach((group, groupIndex) => {\r\n      const { index, id, name } = group\r\n\r\n      const validIndex = index\r\n      fillMenuArrayWithEmptyMenuItem(menuItemArr, validIndex)\r\n\r\n      if (menuItemArr[validIndex].name == 'empty') {\r\n        menuItemArr[validIndex] = {\r\n          id: id.split('.').slice(-1)[0],\r\n          name,\r\n          index: validIndex,\r\n          path: '',\r\n          style: {},\r\n          group: '',\r\n          items: [] as MenuItem[],\r\n        } as MenuItem\r\n      }\r\n\r\n\r\n      currentMenu = menuItemArr[validIndex]\r\n      if (groupIndex < groupLength - 1) {\r\n        menuItemArr = menuItemArr[validIndex].items\r\n      }\r\n    })\r\n\r\n    const pageMenuItem : MenuItem = {\r\n      id: page.path,\r\n      name: page.style[\"navigationBarTitleText\"] as string,\r\n      index: lastGroup.index,\r\n      path: page.path,\r\n      style: page.style,\r\n      group: page.group,\r\n      items: [] as MenuItem[],\r\n    }\r\n    if (hasPageGroup && currentMenu != null) {\r\n      const pageIndex = lastGroup.index\r\n      fillMenuArrayWithEmptyMenuItem(currentMenu!.items, pageIndex)\r\n      if (currentMenu!.items[pageIndex].name == 'empty') {\r\n        currentMenu!.items[pageIndex] = pageMenuItem\r\n      } else {\r\n        currentMenu!.items.push(pageMenuItem)\r\n      }\r\n    } else {\r\n      currentMenu!.items.push(pageMenuItem)\r\n    }\r\n  })\r\n\r\n  return removeEmptyItem(res)\r\n}\r\n\r\nfunction hasPageGroup(value ?: string | null) : boolean {\r\n  // #ifdef APP-ANDROID\r\n  return value !== null\r\n  // #endif\r\n  // #ifndef APP-ANDROID\r\n  return !!value\r\n  // #endif\r\n}\r\n\r\nfunction camelToDash(camelStr: string): string {\r\n  // 将首字母转换为小写, 兼容类似 Base64 场景\r\n  camelStr = camelStr.charAt(0).toLowerCase() + camelStr.slice(1);\r\n  return camelStr.replace(/([A-Z])/g, '-$1').toLowerCase()\r\n}\r\n\r\nfunction fillMenuArrayWithEmptyMenuItem(arr : MenuItem[], index : number) : void {\r\n  const len = arr.length\r\n  for (let i = 0; i <= index - (len - 1); i++) {\r\n    arr.push({\r\n      id: '',\r\n      name: 'empty',\r\n      index: i,\r\n      path: '',\r\n      style: {},\r\n      group: '',\r\n      items: [] as MenuItem[],\r\n    } as MenuItem)\r\n  }\r\n}\r\n\r\nfunction removeEmptyItem(arr : MenuItem[]) : MenuItem[] {\r\n  const res = arr.filter((item : MenuItem) : boolean => item.name !== 'empty')\r\n  res.forEach(menuItem => {\r\n    addSetTabBarPage(menuItem)\r\n    // #ifdef APP-ANDROID\r\n    menuItem.items = removeEmptyItem(menuItem.items)\r\n    // #endif\r\n    // #ifndef APP-ANDROID\r\n    menuItem!.items = removeEmptyItem(menuItem!.items)\r\n    // #endif\r\n  })\r\n  return res\r\n}\r\n\r\nfunction addSetTabBarPage(menuItem : MenuItem) {\r\n  const { id, name } = menuItem\r\n  if (id == 'page' && name == '页面和路由') {\r\n    menuItem.items.push({\r\n      id: 'set-tab-bar',\r\n      name: '设置 TabBar',\r\n      index: 0,\r\n      path: 'set-tab-bar',\r\n      style: {\r\n        navigationBarTitleText: '设置 TabBar'\r\n      },\r\n      group: null,\r\n      items: []\r\n    } as MenuItem)\r\n  }\r\n}\r\n"],"names":["subPackages","pages","groups","hasPageGroup"],"mappings":"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"}