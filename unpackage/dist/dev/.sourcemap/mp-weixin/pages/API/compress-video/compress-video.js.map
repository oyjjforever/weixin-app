{"version":3,"file":"compress-video.js","sources":["pages/API/compress-video/compress-video.uvue","../../../Program Files/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvQVBJL2NvbXByZXNzLXZpZGVvL2NvbXByZXNzLXZpZGVvLnV2dWU"],"sourcesContent":["<template>\n\n\n\n    <page-head :title=\"title\"></page-head>\n    <view>\n      <view class=\"uni-padding-wrap\">\n        <video class=\"video\" :src=\"beforeCompressPath\" :controls=\"true\" :poster=\"beforeCoverImagePath\"></video>\n        <view class=\"uni-title\">\n          <text class=\"uni-subtitle-text\">压缩前视频信息</text>\n        </view>\n        <text>{{beforeCompressVideoInfo}}</text>\n        <video class=\"video\" :src=\"afterCompressPath\" :controls=\"true\" :poster=\"afterCoverImagePath\"></video>\n        <view class=\"uni-title\">\n          <text class=\"uni-subtitle-text\">压缩后视频信息</text>\n        </view>\n        <text>{{afterCompressVideoInfo}}</text>\n        <view class=\"uni-btn-v\">\n          <button type=\"primary\" @click=\"chooseVideo\">从相册中选取待压缩的视频</button>\n        </view>\n        <view class=\"uni-btn-v\">\n          <button type=\"primary\" @click=\"compressVideo\">压缩视频</button>\n        </view>\n        <enum-data title=\"压缩质量\" :items=\"qualityItemTypes\" @change=\"onQualityChange\"></enum-data>\n        <view class=\"uni-common-mt\">\n          <text class=\"uni-title uni-title-text\">相对于原视频的分辨率比例，取值范围(0, 1]</text>\n          <slider :min=\"0.1\" :max=\"1\" :step=\"0.1\" :show-value=\"true\" @change=\"onResolutionChange\"></slider>\n        </view>\n      </view>\n    </view>\n\n\n\n</template>\n\n<script lang=\"uts\">\n  import { ItemType } from '@/components/enum-data/enum-data-types';\n  type VideoInfoForTest = {\n    width: number;\n    height: number;\n    isSizeReduce: boolean;\n  }\n  export default {\n    data() {\n      return {\n        title: \"compressVideo\",\n        beforeCompressVideoInfo: \"\",\n        afterCompressVideoInfo: \"\",\n        beforeCompressPath: \"\",\n        afterCompressPath: \"\",\n        beforeCoverImagePath: \"\",\n        afterCoverImagePath: \"\",\n        quality: null as string | null,\n        bitrate: null as number | null,\n        fps: null as number | null,\n        resolution: null as number | null,\n        qualityItemTypes: [{ \"value\": 0, \"name\": \"low(低)\" }, { \"value\": 1, \"name\": \"medium(中)\" }, { \"value\": 2, \"name\": \"high(高)\" }] as ItemType[],\n        qualityItems: [\"low\", \"medium\", \"high\"],\n        // 自动化测试\n        videoInfoForTest: null as VideoInfoForTest | null,\n        videoSrcForTest: '/static/test-video/10second-demo.mp4',\n        videoSrcForTestWidth: 0,\n        videoSrcForTestHeight: 0\n      }\n    },\n    methods: {\n      compressVideo() {\n        if (this.beforeCompressPath == \"\") {\n          uni.showToast({\n            title: \"请先选择视频\",\n            icon: \"error\"\n          });\n          return;\n        }\n        uni.showLoading({\n          title: \"视频压缩中\"\n        });\n        uni.compressVideo({\n          src: this.beforeCompressPath,\n          quality: this.quality,\n          resolution: this.resolution,\n          success: (res) => {\n            uni.__f__('log','at pages/API/compress-video/compress-video.uvue:83',\"compressVideo success\", JSON.stringify(res));\n            this.afterCompressPath = res.tempFilePath;\n            uni.showToast({\n              title: \"压缩成功\",\n              icon: null\n            });\n            uni.getVideoInfo({\n              src: res.tempFilePath,\n              success: (_res) => {\n                this.afterCompressVideoInfo = `视频画面方向: ${_res.orientation}\\n视频格式: ${_res.type}\\n视频长度: ${_res.duration}s\\n视频大小: ${_res.size}KB\\n视频宽度: ${_res.width}\\n视频高度: ${_res.height}\\n视频帧率: ${_res.fps}fps\\n视频码率: ${_res.bitrate}kbps`;\n\n\n\n\n\n\n              }\n            });\n          },\n          fail: (err) => {\n            uni.showModal({\n              title: \"压缩视频失败\",\n              content: JSON.stringify(err),\n              showCancel: false\n            });\n          },\n          complete: (_) => {\n            uni.hideLoading();\n          }\n        });\n      },\n      chooseVideo() {\n        uni.chooseVideo({\n          sourceType: [\"album\"],\n          compressed: false,\n          success: (res) => {\n            this.beforeCompressPath = res.tempFilePath;\n            uni.getVideoInfo({\n              src: res.tempFilePath,\n              success: (_res) => {\n                this.beforeCompressVideoInfo = `视频画面方向: ${_res.orientation}\\n视频格式: ${_res.type}\\n视频长度: ${_res.duration}s\\n视频大小: ${_res.size}KB\\n视频宽度: ${_res.width}\\n视频高度: ${_res.height}\\n视频帧率: ${_res.fps}fps\\n视频码率: ${_res.bitrate}kbps`;\n\n\n\n\n\n\n              }\n            });\n          }\n        });\n      },\n      onQualityChange(value : number) {\n        this.quality = this.qualityItems[value];\n      },\n      onResolutionChange(event : UniSliderChangeEvent) {\n        this.resolution = event.detail.value;\n      },\n      testCompressVideo() {\n        let beforeCompressSize : number, afterComoressSize : number;\n        uni.compressVideo({\n          src: this.videoSrcForTest,\n          quality: 'medium',\n          success: (res) => {\n            uni.getVideoInfo({\n              src: this.videoSrcForTest,\n              success: (_res) => {\n                beforeCompressSize = Math.trunc(_res.size);\n                this.videoSrcForTestWidth = _res.width\n                this.videoSrcForTestHeight = _res.height\n                uni.getVideoInfo({\n                  src: res.tempFilePath,\n                  success: (__res) => {\n                    afterComoressSize = Math.trunc(__res.size);\n                    this.videoInfoForTest = {\n                      \"width\": __res.width,\n                      \"height\": __res.height,\n                      \"isSizeReduce\": afterComoressSize < beforeCompressSize\n                    } as VideoInfoForTest;\n                  },\n                  fail(err) {\n                    uni.__f__('log','at pages/API/compress-video/compress-video.uvue:164','>>>>>> 压缩失败', err.errMsg)\n                  }\n                });\n              }\n            });\n          },\n          fail: (_) => {\n            this.videoInfoForTest = null;\n          }\n        });\n      }\n    }\n  }\n</script>\n\n<style>\n  .video {\n    align-self: center;\n  }\n\n  .image-container {\n    flex-direction: row;\n  }\n</style>\n","import MiniProgramPage from 'W:/Workplace/2.小程序/lihai-app/pages/API/compress-video/compress-video.uvue'\nwx.createPage(MiniProgramPage)"],"names":["defineComponent","ItemType","uni"],"mappings":"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"}