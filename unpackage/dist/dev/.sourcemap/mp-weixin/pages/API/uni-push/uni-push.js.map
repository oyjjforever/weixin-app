{"version":3,"file":"uni-push.js","sources":["pages/API/uni-push/uni-push.uvue","../../../Program Files/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvQVBJL3VuaS1wdXNoL3VuaS1wdXNoLnV2dWU"],"sourcesContent":["<template>\r\n\r\n\r\n\r\n  <view>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <button class=\"normal-button\" type=\"default\" @click=\"handleSendPushMessage\">\r\n      发送通知消息 | sendPushMessage\r\n    </button>\r\n    <button class=\"normal-button uni-common-mb\" type=\"default\" @click=\"handleGetClientId\">\r\n      获取cid | getPushClientId\r\n    </button>\r\n    <button class=\"normal-button\" type=\"default\" @click=\"handleOnPushMessage\">\r\n      注册回调 | onPushMessage\r\n    </button>\r\n    <button class=\"normal-button\" type=\"default\" @click=\"handleOffPushMessage\">\r\n      注销回调 | offPushMessage\r\n    </button>\r\n  </view>\r\n\r\n\r\n\r\n</template>\r\n\r\n<script setup lang=\"uts\">\r\n  // 自动化测试\r\n  type TypeJestResult = {\r\n    clientId : string,\r\n    sendPushMessageRes : number,\r\n    onPushMessageType:string,\r\n    onPushMessageCallbackInfo:string\r\n  }\r\n  type TypeIsRegister = {\r\n    state:boolean\r\n  }\r\n  const jestResult = reactive({\r\n    clientId:\"\",\r\n    sendPushMessageRes:-1,\r\n    onPushMessageType:\"\",\r\n    onPushMessageCallbackInfo:\"\"\r\n  } as TypeJestResult)\r\n  // 自动化测试\r\n  const autoTest = ref(false);\r\n  const updateAutoTest = (value : boolean) => {\r\n    autoTest.value = value\r\n  }\r\n\r\n  const channelInfo = ref(\"\")\r\n  const onPushMessageCallback = (res : OnPushMessageCallbackResult) => {\r\n    // 自动化测试\r\n    jestResult.onPushMessageType = res.type\r\n    jestResult.onPushMessageCallbackInfo = JSON.stringify(res.data)\r\n    if (!autoTest.value) {\r\n      uni.showModal({\r\n        title: \"onPushMessage回调信息\",\r\n        content: `type：${res.type} \\n data：${JSON.stringify(res.data)}`\r\n      })\r\n    }\r\n  }\r\n\r\n  // 为兼容Android测试例中能获取到，此处用reactive定义\r\n  const isRegister = reactive({\r\n    state:false\r\n  } as TypeIsRegister);\r\n\r\n  const handleOnPushMessage = () => {\r\n    if (isRegister.state) {\r\n      uni.showToast({\r\n        icon: \"error\",\r\n        title: \"无需重复注册\"\r\n      })\r\n      return\r\n    }\r\n    uni.onPushMessage(onPushMessageCallback)\r\n    isRegister.state = true\r\n    uni.showToast({\r\n      title: \"成功注册\"\r\n    })\r\n  }\r\n\r\n  const handleOffPushMessage = () => {\r\n    if (!isRegister.state) {\r\n      uni.showToast({\r\n        icon: \"error\",\r\n        title: \"未注册, 无需注销\"\r\n      })\r\n      return\r\n    }\r\n    uni.offPushMessage(onPushMessageCallback)\r\n    isRegister.state = false\r\n    uni.showToast({\r\n      title: \"成功注销\"\r\n    })\r\n  }\r\n\r\n  const handleCreateChannel = (showToast : boolean) => {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n  const handleGetAllChannels = () => {\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n  const handleCreateLocalNotification = () => {\r\n    if (uni.getAppAuthorizeSetting().notificationAuthorized == \"authorized\") {\r\n      handleCreateChannel(false)\r\n      const date = new Date();\r\n      const hour = date.getHours()\r\n      const minute = date.getMinutes()\r\n      const second = date.getSeconds()\r\n      const formateTime = (target : number) : string => {\r\n        return target < 10 ? `0${target}` : `${target}`\r\n      }\r\n      uni.createPushMessage({\r\n        title: \"主标题(title)\",\r\n        content: `内容(content)，创建时间: ${formateTime(hour)}:${formateTime(minute)}:${formateTime(second)}`,\r\n        cover: false,\r\n        channelId: \"msg-pass\",\r\n        when: Date.now() + 10000,\r\n        icon: \"/static/uni.png\",\r\n        sound: \"system\",\r\n        delay: 1,\r\n        payload: {\r\n          pkey: \"pvalue1\"\r\n        },\r\n\r\n\r\n\r\n\r\n        category: \"IM\",\r\n\r\n        success(res) {\r\n          uni.__f__('log','at pages/API/uni-push/uni-push.uvue:175',\"res: \" + res);\r\n          uni.hideToast()\r\n          uni.showToast({\r\n            title: \"创建本地通知消息成功\"\r\n          })\r\n        },\r\n        fail(e) {\r\n          uni.__f__('log','at pages/API/uni-push/uni-push.uvue:182',\"fail :\" + e);\r\n          uni.hideToast()\r\n          uni.showToast({\r\n            title: \"创建本地通知消息失败\",\r\n            icon: \"error\"\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      uni.showToast({\r\n        title: \"请在设置中开启通知权限\",\r\n        icon: \"error\"\r\n      })\r\n    }\r\n  }\r\n\r\n  async function getPushClientId(): Promise<string>{\r\n    let pushClientId = '';\r\n    let res:void = await new Promise<void>(resolve => {\r\n      uni.getPushClientId({\r\n        success: (res: GetPushClientIdSuccess) => {\r\n          uni.__f__('log','at pages/API/uni-push/uni-push.uvue:203',res.cid)\r\n          pushClientId = res.cid\r\n          resolve()\r\n        },\r\n        fail: (err: GetPushClientIdFail) => {\r\n          resolve()\r\n          uni.__f__('error','at pages/API/uni-push/uni-push.uvue:209',err);\r\n          if (err.message.includes('uniPush is not enabled')) {\r\n            uni.showModal({\r\n              title: '获取cid失败',\r\n              content: '当前项目未启用uni-push，检查manifest.json中的uni-push配置',\r\n              showCancel: false\r\n            });\r\n          } else if (err.message.includes('getPushClientId:fail register fail: {\\\"errorCode\\\":1,\\\"errorMsg\\\":\\\"\\\"}')) {\r\n            uni.showModal({\r\n              title: '获取cid失败',\r\n              content: '当前项目未开通uni-push，开通文档：https://uniapp.dcloud.net.cn/unipush-v2.html#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E5%BC%80%E9%80%9A',\r\n              showCancel: false\r\n            });\r\n          } else {\r\n            uni.showToast({\r\n              title: `获取cid失败`,\r\n              icon: \"error\"\r\n            })\r\n          }\r\n        }\r\n      })\r\n    })\r\n    return pushClientId\r\n  }\r\n\r\n  const handleGetClientId = async():Promise<void> =>{\r\n    uni.showLoading({\r\n      title: \"正在获取cid\",\r\n    })\r\n    const cid = await getPushClientId()\r\n    if (cid != '') {\r\n      // 自动化测试\r\n      jestResult.clientId = cid\r\n      if (!autoTest.value) {\r\n        uni.showModal({\r\n          title: \"获取cid\",\r\n          content: \"获取cid成功\" + cid,\r\n          showCancel: false\r\n        })\r\n      }\r\n    }\r\n    uni.hideLoading()\r\n  }\r\n  const handleSendPushMessage = async():Promise<void>=> {\r\n    const pushClientId = await getPushClientId()\r\n    if (pushClientId == ''){\r\n      return\r\n    }\r\n    const uniPushCo = uniCloud.importObject(\"uni-push-co\")\r\n    try {\r\n      const res = await uniPushCo.sendPushMessage(pushClientId)\r\n      // 自动化测试\r\n      jestResult.sendPushMessageRes = res.errCode as number\r\n      if (!autoTest.value) {\r\n        uni.showToast({\r\n          title: \"发送通知消息成功\"\r\n        })\r\n      }\r\n    } catch (err:any) {\r\n      const error = err as UniCloudError\r\n      uni.__f__('error','at pages/API/uni-push/uni-push.uvue:269',error)\r\n      if (!autoTest.value) {\r\n        uni.showToast({\r\n          title: \"发送通知消息失败\",\r\n          icon: \"error\"\r\n        })\r\n      }\r\n    }\r\n  }\r\n  const handleSetBadge = () => {\r\n    if (uni.getDeviceInfo().deviceBrand?.toLowerCase() == \"xiaomi\") {\r\n      if (uni.getAppAuthorizeSetting().notificationAuthorized == \"authorized\") {\r\n        uni.setAppBadgeNumber(5, {\r\n          title: \"AppName\",\r\n          content: \"您有5条未读消息\"\r\n        } as BadgeOptions)\r\n        uni.showToast({\r\n          title: \"设置应用角标数为5\"\r\n        })\r\n      } else {\r\n        uni.showToast({\r\n          title: \"请在设置中开启通知权限\",\r\n          icon: \"error\"\r\n        })\r\n      }\r\n\r\n    } else {\r\n      uni.setAppBadgeNumber(5)\r\n      uni.showToast({\r\n        title: \"设置应用角标数为5\"\r\n      })\r\n    }\r\n  }\r\n  const handleCleanBadge = () => {\r\n    if (uni.getDeviceInfo().deviceBrand?.toLowerCase() == \"xiaomi\") {\r\n      if (uni.getAppAuthorizeSetting().notificationAuthorized == \"authorized\") {\r\n        uni.setAppBadgeNumber(0, {} as BadgeOptions)\r\n        uni.showToast({\r\n          title: \"清空应用角标数\"\r\n        })\r\n      } else {\r\n        uni.showToast({\r\n          title: \"请在设置中开启通知权限\",\r\n          icon: \"error\"\r\n        })\r\n      }\r\n    } else {\r\n      uni.setAppBadgeNumber(0)\r\n      uni.showToast({\r\n        title: \"清空应用角标数\"\r\n      })\r\n    }\r\n  }\r\n\r\n  // 自动化测试\r\n  defineExpose({\r\n    jestResult,\r\n    autoTest,\r\n    updateAutoTest,\r\n    isRegister,\r\n    handleSendPushMessage,\r\n    handleGetClientId,\r\n    handleOnPushMessage,\r\n    handleOffPushMessage\r\n  })\r\n</script>\r\n\r\n<style>\r\n  .normal-button {\r\n    width: 100%;\r\n  }\r\n\r\n  .instructions {\r\n    margin-top: 10px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    background-color: #eee;\r\n  }\r\n</style>\r\n","import MiniProgramPage from 'W:/Workplace/2.小程序/lihai-app/pages/API/uni-push/uni-push.uvue'\nwx.createPage(MiniProgramPage)"],"names":["reactive","ref","uni","__awaiter","uniCloud","MiniProgramPage"],"mappings":"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"}